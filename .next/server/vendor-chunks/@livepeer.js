"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@livepeer";
exports.ids = ["vendor-chunks/@livepeer"];
exports.modules = {

/***/ "(ssr)/./node_modules/@livepeer/core-web/dist/browser/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@livepeer/core-web/dist/browser/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addEventListeners: () => (/* binding */ addEventListeners),\n/* harmony export */   addMediaMetrics: () => (/* binding */ addMediaMetrics),\n/* harmony export */   canPlayMediaNatively: () => (/* binding */ canPlayMediaNatively),\n/* harmony export */   getDeviceInfo: () => (/* binding */ getDeviceInfo)\n/* harmony export */ });\n/* harmony import */ var _livepeer_core_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @livepeer/core/errors */ \"(ssr)/./node_modules/@livepeer/core/dist/errors/index.js\");\n/* harmony import */ var _livepeer_core_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @livepeer/core/utils */ \"(ssr)/./node_modules/@livepeer/core/dist/utils/index.js\");\n/* harmony import */ var _livepeer_core_media__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @livepeer/core/media */ \"(ssr)/./node_modules/@livepeer/core/dist/media/index.js\");\n/* harmony import */ var hls_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hls.js */ \"(ssr)/./node_modules/hls.js/dist/hls.mjs\");\n/* harmony import */ var _livepeer_core_storage__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @livepeer/core/storage */ \"(ssr)/./node_modules/@livepeer/core/dist/storage/index.js\");\n/* harmony import */ var _livepeer_core_version__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @livepeer/core/version */ \"(ssr)/./node_modules/@livepeer/core/dist/version/index.js\");\n// src/media/controls/controller.ts\n\n\n\n// src/hls/hls.ts\n\n\n\n// src/media/utils.ts\n\nvar isClient = () => typeof window !== \"undefined\";\nvar ua = () => isClient() ? window?.navigator?.userAgent?.toLowerCase() : \"\";\nvar isIos = () => /iphone|ipad|ipod|ios|CriOS|FxiOS/.test(ua());\nvar isAndroid = () => /android/.test(ua());\nvar isMobile = () => isClient() && (isIos() || isAndroid());\nvar canPlayMediaNatively = (src) => {\n  if (isClient() && src?.mime) {\n    if (src?.type?.includes(\"audio\")) {\n      const audio = document.createElement(\"audio\");\n      return audio.canPlayType(src.mime).length > 0;\n    }\n    const video = document.createElement(\"video\");\n    return video.canPlayType(src.mime).length > 0;\n  }\n  return true;\n};\n\n// src/hls/hls.ts\nvar VIDEO_HLS_INITIALIZED_ATTRIBUTE = \"data-livepeer-video-hls-initialized\";\nvar isHlsSupported = () => isClient() ? hls_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].isSupported() : true;\nvar createNewHls = ({\n  source,\n  element,\n  callbacks,\n  aspectRatio,\n  config,\n  initialQuality\n}) => {\n  if (element.getAttribute(VIDEO_HLS_INITIALIZED_ATTRIBUTE) === \"true\") {\n    return {\n      setQuality: () => {\n      },\n      destroy: () => {\n      }\n    };\n  }\n  element.setAttribute(VIDEO_HLS_INITIALIZED_ATTRIBUTE, \"true\");\n  const hls = new hls_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    backBufferLength: 60 * 1.5,\n    manifestLoadingMaxRetry: 0,\n    fragLoadingMaxRetry: 0,\n    levelLoadingMaxRetry: 0,\n    appendErrorMaxRetry: 0,\n    ...config,\n    ...config?.liveSyncDurationCount ? {\n      liveSyncDurationCount: config.liveSyncDurationCount\n    } : {\n      liveMaxLatencyDurationCount: 7,\n      liveSyncDurationCount: 3\n    }\n  });\n  const onDestroy = () => {\n    hls?.destroy?.();\n    element?.removeAttribute?.(VIDEO_HLS_INITIALIZED_ATTRIBUTE);\n  };\n  if (element) {\n    hls.attachMedia(element);\n  }\n  let redirected = false;\n  hls.on(hls_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Events.LEVEL_LOADED, async (_e, data) => {\n    const { live, totalduration: duration, url } = data.details;\n    if (!redirected) {\n      callbacks?.onRedirect?.(url ?? null);\n      redirected = true;\n    }\n    callbacks?.onLive?.(Boolean(live));\n    callbacks?.onDuration?.(duration ?? 0);\n  });\n  hls.on(hls_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Events.MEDIA_ATTACHED, async () => {\n    hls.loadSource(source);\n    hls.on(hls_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Events.MANIFEST_PARSED, (_event, _data) => {\n      setQuality({\n        hls: hls ?? null,\n        quality: initialQuality,\n        aspectRatio\n      });\n      callbacks?.onCanPlay?.();\n      if (config.autoPlay) element?.play?.();\n    });\n  });\n  hls.on(hls_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].Events.ERROR, async (_event, data) => {\n    const { details, fatal } = data;\n    const isManifestParsingError = details === \"manifestParsingError\";\n    if (!fatal && !isManifestParsingError) return;\n    callbacks?.onError?.(data);\n    if (fatal) {\n      console.error(`Fatal error : ${data.details}`);\n      switch (data.type) {\n        case hls_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ErrorTypes.MEDIA_ERROR:\n          hls.recoverMediaError();\n          break;\n        case hls_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ErrorTypes.NETWORK_ERROR:\n          console.error(`A network error occurred: ${data.details}`);\n          break;\n        default:\n          console.error(`An unrecoverable error occurred: ${data.details}`);\n          hls.destroy();\n          break;\n      }\n    }\n  });\n  function updateOffset() {\n    const currentDate = Date.now();\n    const newDate = hls.playingDate;\n    if (newDate && currentDate) {\n      callbacks?.onPlaybackOffsetUpdated?.(currentDate - newDate.getTime());\n    }\n  }\n  const updateOffsetInterval = setInterval(updateOffset, 2e3);\n  return {\n    destroy: () => {\n      onDestroy?.();\n      clearInterval?.(updateOffsetInterval);\n      element?.removeAttribute?.(VIDEO_HLS_INITIALIZED_ATTRIBUTE);\n    },\n    setQuality: (videoQuality) => {\n      setQuality({\n        hls: hls ?? null,\n        quality: videoQuality,\n        aspectRatio\n      });\n    }\n  };\n};\nvar setQuality = ({\n  hls,\n  quality,\n  aspectRatio\n}) => {\n  if (hls) {\n    const { width } = (0,_livepeer_core_media__WEBPACK_IMPORTED_MODULE_2__.calculateVideoQualityDimensions)(quality, aspectRatio);\n    if (!width || quality === \"auto\") {\n      hls.currentLevel = -1;\n      return;\n    }\n    if (hls.levels && hls.levels.length > 0) {\n      const sortedLevels = hls.levels.map((level, index) => ({ ...level, index })).sort(\n        (a, b) => Math.abs((width ?? 0) - a.width) - Math.abs((width ?? 0) - b.width)\n      );\n      const bestMatchLevel = sortedLevels?.[0];\n      if ((bestMatchLevel?.index ?? -1) >= 0) {\n        hls.currentLevel = bestMatchLevel.index;\n      } else {\n        hls.currentLevel = -1;\n      }\n    }\n  }\n};\n\n// src/webrtc/shared.ts\n\nvar getRTCPeerConnectionConstructor = () => {\n  if (!isClient()) {\n    return null;\n  }\n  return window.RTCPeerConnection || window.webkitRTCPeerConnection || window.mozRTCPeerConnection || null;\n};\nfunction createPeerConnection(host, iceServers) {\n  const RTCPeerConnectionConstructor = getRTCPeerConnectionConstructor();\n  if (!RTCPeerConnectionConstructor) {\n    throw new Error(\"No RTCPeerConnection constructor found in this browser.\");\n  }\n  const hostNoPort = host?.split(\":\")[0];\n  const defaultIceServers = host ? [\n    {\n      urls: `stun:${hostNoPort}`\n    },\n    {\n      urls: `turn:${hostNoPort}`,\n      username: \"livepeer\",\n      credential: \"livepeer\"\n    }\n  ] : [];\n  return new RTCPeerConnectionConstructor({\n    iceServers: iceServers ? Array.isArray(iceServers) ? iceServers : [iceServers] : defaultIceServers\n  });\n}\nvar DEFAULT_TIMEOUT = 1e4;\nasync function negotiateConnectionWithClientOffer(peerConnection, endpoint, ofr, controller, accessControl, sdpTimeout) {\n  if (peerConnection && endpoint && ofr) {\n    const response = await postSDPOffer(\n      endpoint,\n      ofr.sdp,\n      controller,\n      accessControl,\n      sdpTimeout\n    );\n    if (response.ok) {\n      const answerSDP = await response.text();\n      await peerConnection.setRemoteDescription(\n        new RTCSessionDescription({ type: \"answer\", sdp: answerSDP })\n      );\n      const playheadUtc = response.headers.get(\"Playhead-Utc\");\n      return new Date(playheadUtc ?? /* @__PURE__ */ new Date());\n    }\n    if (response.status === 406) {\n      throw new Error(_livepeer_core_errors__WEBPACK_IMPORTED_MODULE_0__.NOT_ACCEPTABLE_ERROR_MESSAGE);\n    }\n    const errorMessage = await response.text();\n    throw new Error(errorMessage);\n  }\n  throw new Error(\"Peer connection not defined.\");\n}\nfunction preferCodec(sdp, codec) {\n  const lines = sdp.split(\"\\r\\n\");\n  const mLineIndex = lines.findIndex((line) => line.startsWith(\"m=video\"));\n  if (mLineIndex === -1) return sdp;\n  const codecRegex = new RegExp(`a=rtpmap:(\\\\d+) ${codec}(/\\\\d+)+`);\n  const codecLine = lines.find((line) => codecRegex.test(line));\n  if (!codecLine) return sdp;\n  const codecPayload = codecRegex.exec(codecLine)[1];\n  const mLineElements = lines[mLineIndex].split(\" \");\n  const reorderedMLine = [\n    ...mLineElements.slice(0, 3),\n    codecPayload,\n    ...mLineElements.slice(3).filter((payload) => payload !== codecPayload)\n  ];\n  lines[mLineIndex] = reorderedMLine.join(\" \");\n  return lines.join(\"\\r\\n\");\n}\nasync function constructClientOffer(peerConnection, endpoint, noIceGathering) {\n  if (peerConnection && endpoint) {\n    const originalCreateOffer = peerConnection.createOffer.bind(peerConnection);\n    peerConnection.createOffer = async function(...args) {\n      const originalOffer = await originalCreateOffer.apply(this, args);\n      return new RTCSessionDescription({\n        // @ts-ignore (TODO: fix this)\n        type: originalOffer.type,\n        // @ts-ignore (TODO: fix this)\n        sdp: preferCodec(originalOffer.sdp, \"H264\")\n      });\n    };\n    const offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer);\n    if (noIceGathering) {\n      return peerConnection.localDescription;\n    }\n    const ofr = await waitToCompleteICEGathering(peerConnection);\n    if (!ofr) {\n      throw Error(\"failed to gather ICE candidates for offer\");\n    }\n    return ofr;\n  }\n  return null;\n}\nvar playbackIdPattern = /([/+])([^/+?]+)$/;\nvar REPLACE_PLACEHOLDER = \"PLAYBACK_ID\";\nvar MAX_REDIRECT_CACHE_SIZE = 10;\nvar redirectUrlCache = /* @__PURE__ */ new Map();\nfunction getCachedTemplate(key) {\n  const cachedItem = redirectUrlCache.get(key);\n  if (cachedItem) {\n    redirectUrlCache.delete(key);\n    redirectUrlCache.set(key, cachedItem);\n  }\n  return cachedItem;\n}\nfunction setCachedTemplate(key, value) {\n  if (redirectUrlCache.has(key)) {\n    redirectUrlCache.delete(key);\n  } else if (redirectUrlCache.size >= MAX_REDIRECT_CACHE_SIZE) {\n    const oldestKey = redirectUrlCache.keys().next().value;\n    if (oldestKey) {\n      redirectUrlCache.delete(oldestKey);\n    }\n  }\n  redirectUrlCache.set(key, value);\n}\nasync function postSDPOffer(endpoint, data, controller, accessControl, sdpTimeout) {\n  const id = setTimeout(\n    () => controller.abort(),\n    sdpTimeout ?? DEFAULT_TIMEOUT\n  );\n  const urlForPost = new URL(endpoint);\n  const parsedMatches = urlForPost.pathname.match(playbackIdPattern);\n  const currentPlaybackId = parsedMatches?.[2];\n  const cachedTemplateUrl = getCachedTemplate(endpoint);\n  if (cachedTemplateUrl && currentPlaybackId) {\n    urlForPost.host = cachedTemplateUrl.host;\n    urlForPost.pathname = cachedTemplateUrl.pathname.replace(\n      REPLACE_PLACEHOLDER,\n      currentPlaybackId\n    );\n    urlForPost.search = cachedTemplateUrl.search;\n  }\n  const response = await fetch(urlForPost.toString(), {\n    method: \"POST\",\n    mode: \"cors\",\n    headers: {\n      \"content-type\": \"application/sdp\",\n      ...accessControl?.accessKey ? {\n        \"Livepeer-Access-Key\": accessControl.accessKey\n      } : {},\n      ...accessControl?.jwt ? {\n        \"Livepeer-Jwt\": accessControl.jwt\n      } : {}\n    },\n    body: data,\n    signal: controller.signal\n  });\n  clearTimeout(id);\n  return response;\n}\nasync function getRedirectUrl(endpoint, abortController, timeout) {\n  try {\n    const cachedTemplateUrl = getCachedTemplate(endpoint);\n    if (cachedTemplateUrl) {\n      const currentIngestUrl = new URL(endpoint);\n      const matches = currentIngestUrl.pathname.match(playbackIdPattern);\n      const currentPlaybackId = matches?.[2];\n      if (currentPlaybackId) {\n        const finalRedirectUrl = new URL(cachedTemplateUrl);\n        finalRedirectUrl.pathname = cachedTemplateUrl.pathname.replace(\n          REPLACE_PLACEHOLDER,\n          currentPlaybackId\n        );\n        return finalRedirectUrl;\n      }\n    }\n    const id = setTimeout(\n      () => abortController.abort(),\n      timeout ?? DEFAULT_TIMEOUT\n    );\n    const response = await fetch(endpoint, {\n      method: \"HEAD\",\n      signal: abortController.signal\n    });\n    await response.text();\n    clearTimeout(id);\n    const actualRedirectedUrl = new URL(response.url);\n    if (actualRedirectedUrl) {\n      const templateForCache = new URL(actualRedirectedUrl);\n      templateForCache.pathname = templateForCache.pathname.replace(\n        playbackIdPattern,\n        `$1${REPLACE_PLACEHOLDER}`\n      );\n      if (!templateForCache.searchParams.has(\"ingestpb\") || templateForCache.searchParams.get(\"ingestpb\") !== \"true\") {\n        setCachedTemplate(endpoint, templateForCache);\n      }\n    }\n    return actualRedirectedUrl;\n  } catch (e) {\n    return null;\n  }\n}\nasync function waitToCompleteICEGathering(peerConnection) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(peerConnection.localDescription);\n    }, 5e3);\n    peerConnection.onicegatheringstatechange = (_ev) => {\n      if (peerConnection.iceGatheringState === \"complete\") {\n        resolve(peerConnection.localDescription);\n      }\n    };\n  });\n}\n\n// src/webrtc/whep.ts\nvar VIDEO_WEBRTC_INITIALIZED_ATTRIBUTE = \"data-livepeer-video-whep-initialized\";\nvar createNewWHEP = ({\n  source,\n  element,\n  callbacks,\n  accessControl,\n  sdpTimeout,\n  iceServers\n}) => {\n  if (element.getAttribute(VIDEO_WEBRTC_INITIALIZED_ATTRIBUTE) === \"true\") {\n    return {\n      destroy: () => {\n      }\n    };\n  }\n  element.setAttribute(VIDEO_WEBRTC_INITIALIZED_ATTRIBUTE, \"true\");\n  let destroyed = false;\n  const abortController = new AbortController();\n  let peerConnection = null;\n  const stream = new MediaStream();\n  const errorComposed = (e) => {\n    callbacks?.onError?.(e);\n    if (element) {\n      element.srcObject = null;\n    }\n  };\n  getRedirectUrl(source, abortController, sdpTimeout).then((redirectUrl) => {\n    if (destroyed || !redirectUrl) {\n      return;\n    }\n    const redirectUrlString = redirectUrl.toString();\n    callbacks?.onRedirect?.(redirectUrlString ?? null);\n    peerConnection = createPeerConnection(redirectUrl.host, iceServers);\n    if (peerConnection) {\n      peerConnection.addTransceiver(\"video\", {\n        direction: \"recvonly\"\n      });\n      peerConnection.addTransceiver(\"audio\", {\n        direction: \"recvonly\"\n      });\n      peerConnection.ontrack = (event) => {\n        if (destroyed) {\n          return;\n        }\n        try {\n          if (stream) {\n            const track = event.track;\n            const currentTracks = stream.getTracks();\n            const streamAlreadyHasVideoTrack = currentTracks.some(\n              (track2) => track2.kind === \"video\"\n            );\n            const streamAlreadyHasAudioTrack = currentTracks.some(\n              (track2) => track2.kind === \"audio\"\n            );\n            switch (track.kind) {\n              case \"video\":\n                if (streamAlreadyHasVideoTrack) {\n                  break;\n                }\n                stream.addTrack(track);\n                break;\n              case \"audio\":\n                if (streamAlreadyHasAudioTrack) {\n                  break;\n                }\n                stream.addTrack(track);\n                break;\n              default:\n                console.log(`received unknown track ${track}`);\n            }\n          }\n        } catch (e) {\n          errorComposed(e);\n        }\n      };\n      peerConnection.addEventListener(\"connectionstatechange\", (_ev) => {\n        if (destroyed) {\n          return;\n        }\n        try {\n          if (peerConnection?.connectionState === \"failed\") {\n            callbacks?.onError?.(new Error(\"Failed to connect to peer.\"));\n          }\n          if (peerConnection?.connectionState === \"connected\" && !element.srcObject) {\n            element.srcObject = stream;\n            callbacks?.onConnected?.();\n          }\n        } catch (e) {\n          errorComposed(e);\n        }\n      });\n      peerConnection.addEventListener(\"negotiationneeded\", async (_ev) => {\n        if (destroyed) {\n          return;\n        }\n        try {\n          const ofr = await constructClientOffer(\n            peerConnection,\n            redirectUrlString\n          );\n          if (destroyed) {\n            return;\n          }\n          const response = await negotiateConnectionWithClientOffer(\n            peerConnection,\n            source,\n            ofr,\n            abortController,\n            accessControl,\n            sdpTimeout\n          );\n          if (destroyed) {\n            return;\n          }\n          const currentDate = Date.now();\n          if (response && currentDate) {\n            callbacks?.onPlaybackOffsetUpdated?.(\n              currentDate - response.getTime()\n            );\n          }\n        } catch (e) {\n          errorComposed(e);\n        }\n      });\n    }\n  }).catch((e) => errorComposed(e));\n  return {\n    destroy: () => {\n      destroyed = true;\n      abortController?.abort?.();\n      peerConnection?.close?.();\n      if (element) {\n        element.srcObject = null;\n      }\n      element?.removeAttribute?.(VIDEO_WEBRTC_INITIALIZED_ATTRIBUTE);\n    }\n  };\n};\n\n// src/media/controls/fullscreen.ts\nvar methodsList = [\n  // modern browsers\n  {\n    requestFullscreen: \"requestFullscreen\",\n    exitFullscreen: \"exitFullscreen\",\n    fullscreenElement: \"fullscreenElement\",\n    fullscreenEnabled: \"fullscreenEnabled\",\n    fullscreenchange: \"fullscreenchange\",\n    fullscreenerror: \"fullscreenerror\"\n  },\n  // new WebKit\n  {\n    requestFullscreen: \"webkitRequestFullscreen\",\n    exitFullscreen: \"webkitExitFullscreen\",\n    fullscreenElement: \"webkitFullscreenElement\",\n    fullscreenEnabled: \"webkitFullscreenEnabled\",\n    fullscreenchange: \"webkitfullscreenchange\",\n    fullscreenerror: \"webkitfullscreenerror\"\n  },\n  // old WebKit\n  {\n    requestFullscreen: \"webkitRequestFullScreen\",\n    exitFullscreen: \"webkitCancelFullScreen\",\n    fullscreenElement: \"webkitCurrentFullScreenElement\",\n    fullscreenEnabled: \"webkitCancelFullScreen\",\n    fullscreenchange: \"webkitfullscreenchange\",\n    fullscreenerror: \"webkitfullscreenerror\"\n  },\n  // old firefox\n  {\n    requestFullscreen: \"mozRequestFullScreen\",\n    exitFullscreen: \"mozCancelFullScreen\",\n    fullscreenElement: \"mozFullScreenElement\",\n    fullscreenEnabled: \"mozFullScreenEnabled\",\n    fullscreenchange: \"mozfullscreenchange\",\n    fullscreenerror: \"mozfullscreenerror\"\n  },\n  // old IE\n  {\n    requestFullscreen: \"msRequestFullscreen\",\n    exitFullscreen: \"msExitFullscreen\",\n    fullscreenElement: \"msFullscreenElement\",\n    fullscreenEnabled: \"msFullscreenEnabled\",\n    fullscreenchange: \"MSFullscreenChange\",\n    fullscreenerror: \"MSFullscreenError\"\n  }\n];\nvar iosMethods = {\n  requestFullscreen: \"webkitEnterFullscreen\",\n  exitFullscreen: \"webkitExitFullscreen\",\n  fullscreenElement: null,\n  fullscreenEnabled: \"webkitDisplayingFullscreen\",\n  fullscreenchange: \"fullscreenchange\",\n  fullscreenerror: \"fullscreenerror\"\n};\nvar isFullscreenSupported = () => {\n  if (typeof document === \"undefined\") {\n    return true;\n  }\n  const videoElement = document.createElement(\"video\");\n  const result = Boolean(getFullscreenMethods(videoElement));\n  videoElement.remove();\n  return result;\n};\nvar isCurrentlyFullscreen = (inputElement) => {\n  const { methods, element } = getFullscreenMethods(inputElement);\n  if (methods?.fullscreenElement) {\n    return Boolean(document[methods.fullscreenElement]);\n  }\n  return Boolean(element?.webkitPresentationMode === \"fullscreen\");\n};\nvar enterFullscreen = (inputElement) => {\n  const { methods, element } = getFullscreenMethods(inputElement);\n  if (methods) {\n    return new Promise((resolve, reject) => {\n      const fullscreenMethod = methods.requestFullscreen;\n      const onFullScreen = () => {\n        removeFullscreenEventListener(inputElement, onFullScreen);\n        resolve();\n      };\n      addFullscreenEventListener(inputElement, onFullScreen);\n      const returnPromise = methods.fullscreenElement ? element?.parentElement?.[fullscreenMethod]?.() : element?.[fullscreenMethod]?.() ?? null;\n      if (returnPromise === null) {\n        return resolve();\n      }\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreen).catch(reject);\n      }\n    });\n  }\n  return false;\n};\nvar exitFullscreen = (inputElement) => {\n  const { methods, element } = getFullscreenMethods(inputElement);\n  if (methods) {\n    return new Promise((resolve, reject) => {\n      if (!isCurrentlyFullscreen(inputElement)) {\n        resolve();\n        return;\n      }\n      const onFullScreenExit = () => {\n        removeFullscreenEventListener(inputElement, onFullScreenExit);\n        resolve();\n      };\n      addFullscreenEventListener(inputElement, onFullScreenExit);\n      const returnPromise = methods.fullscreenElement ? document?.[methods.exitFullscreen]?.() : element?.[methods.exitFullscreen]?.() ?? null;\n      if (returnPromise instanceof Promise) {\n        returnPromise.then(onFullScreenExit).catch(reject);\n      }\n    });\n  }\n  return false;\n};\nvar addFullscreenEventListener = (inputElement, callback) => {\n  const { methods, element } = getFullscreenMethods(inputElement);\n  if (methods && element) {\n    const parentElementOrElement = element?.parentElement ?? element;\n    parentElementOrElement?.addEventListener(\n      methods.fullscreenchange,\n      callback,\n      false\n    );\n    return () => {\n      removeFullscreenEventListener(inputElement, callback);\n    };\n  }\n  return null;\n};\nvar removeFullscreenEventListener = (inputElement, callback) => {\n  const { methods, element } = getFullscreenMethods(inputElement);\n  if (methods && element) {\n    const parentElementOrElement = element?.parentElement ?? element;\n    parentElementOrElement?.removeEventListener(\n      methods.fullscreenchange,\n      callback,\n      false\n    );\n    return true;\n  }\n  return false;\n};\nvar getFullscreenMethods = (element) => {\n  if (isClient()) {\n    for (const methods of methodsList) {\n      const exitFullscreenMethod = methods.exitFullscreen;\n      if (exitFullscreenMethod in document) {\n        return { methods, element };\n      }\n    }\n    if (element && iosMethods.requestFullscreen in element) {\n      return { methods: iosMethods, element };\n    }\n  }\n  return { methods: null };\n};\n\n// src/media/controls/pictureInPicture.ts\nvar isPictureInPictureSupported = (element) => {\n  if (typeof document === \"undefined\") {\n    return true;\n  }\n  const videoElement = element ?? document.createElement(\"video\");\n  const isPiPDisabled = Boolean(\n    videoElement.disablePictureInPicture\n  );\n  const { apiType } = getPictureInPictureMode(videoElement);\n  return Boolean(apiType) && !isPiPDisabled;\n};\nvar isCurrentlyPictureInPicture = (inputElement) => {\n  const { apiType, element } = getPictureInPictureMode(inputElement);\n  if (apiType === \"w3c\") {\n    return Boolean(document?.pictureInPictureElement);\n  }\n  if (apiType === \"webkit\") {\n    return element?.webkitPresentationMode === \"picture-in-picture\";\n  }\n  return false;\n};\nvar enterPictureInPicture = async (inputElement) => {\n  const { apiType, element } = getPictureInPictureMode(inputElement);\n  if (apiType === \"w3c\") {\n    await element?.requestPictureInPicture?.();\n  } else if (apiType === \"webkit\") {\n    await element?.webkitSetPresentationMode?.(\"picture-in-picture\");\n  }\n  return null;\n};\nvar exitPictureInPicture = (inputElement) => {\n  const { apiType, element } = getPictureInPictureMode(inputElement);\n  if (apiType === \"w3c\") {\n    return document?.exitPictureInPicture?.() ?? null;\n  }\n  if (apiType === \"webkit\") {\n    return element?.webkitSetPresentationMode?.(\"inline\") ?? null;\n  }\n  return null;\n};\nvar addEnterPictureInPictureEventListener = (inputElement, callback) => {\n  const { apiType, element } = getPictureInPictureMode(inputElement);\n  if (apiType === \"w3c\" && element) {\n    element.addEventListener(\"enterpictureinpicture\", callback, false);\n    return () => {\n      element.removeEventListener(\"enterpictureinpicture\", callback, false);\n    };\n  }\n  if (apiType === \"webkit\" && element) {\n    const callbackComposed = (e) => {\n      if (element?.webkitPresentationMode === \"picture-in-picture\") {\n        callback?.(e);\n      }\n    };\n    document.addEventListener(\n      \"webkitpresentationmodechanged\",\n      callbackComposed,\n      false\n    );\n    return () => {\n      document.removeEventListener(\n        \"webkitpresentationmodechanged\",\n        callbackComposed,\n        false\n      );\n    };\n  }\n  return null;\n};\nvar addExitPictureInPictureEventListener = (inputElement, callback) => {\n  const { apiType, element } = getPictureInPictureMode(inputElement);\n  if (apiType === \"w3c\" && element) {\n    element.addEventListener(\"leavepictureinpicture\", callback, false);\n    return () => {\n      element.removeEventListener(\"leavepictureinpicture\", callback, false);\n    };\n  }\n  if (apiType === \"webkit\" && element) {\n    const callbackComposed = (e) => {\n      if (element?.webkitPresentationMode === \"inline\") {\n        callback?.(e);\n      }\n    };\n    document.addEventListener(\n      \"webkitpresentationmodechanged\",\n      callbackComposed,\n      false\n    );\n    return () => {\n      document.removeEventListener(\n        \"webkitpresentationmodechanged\",\n        callbackComposed,\n        false\n      );\n    };\n  }\n  return null;\n};\nvar getPictureInPictureMode = (element) => {\n  if (isClient() && element instanceof HTMLVideoElement) {\n    if (document?.pictureInPictureEnabled) {\n      return { apiType: \"w3c\", element };\n    }\n    if (element?.webkitSupportsPresentationMode?.(\"picture-in-picture\")) {\n      return { apiType: \"webkit\", element };\n    }\n  }\n  return { apiType: null };\n};\n\n// src/media/controls/volume.ts\nvar isVolumeChangeSupported = (type) => {\n  return new Promise((resolve) => {\n    if (typeof window === \"undefined\") {\n      return false;\n    }\n    const testElement = document.createElement(type);\n    const newVolume = 0.342;\n    testElement.volume = newVolume;\n    setTimeout(() => {\n      const isSupported = testElement.volume !== 1;\n      testElement.remove();\n      resolve(isSupported);\n    });\n  });\n};\n\n// src/media/controls/controller.ts\nvar MEDIA_CONTROLLER_INITIALIZED_ATTRIBUTE = \"data-livepeer-controller-initialized\";\nvar allKeyTriggers = [\n  \"KeyF\",\n  \"KeyK\",\n  \"KeyM\",\n  \"KeyI\",\n  \"KeyV\",\n  \"KeyX\",\n  \"Space\",\n  \"ArrowRight\",\n  \"ArrowLeft\"\n];\nvar delay = (ms) => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\nvar addEventListeners = (element, store) => {\n  const initializedState = store.getState();\n  try {\n    isVolumeChangeSupported(\n      initializedState.currentSource?.type === \"audio\" ? \"audio\" : \"video\"\n    ).then((result) => {\n      store.setState(({ __device }) => ({\n        __device: {\n          ...__device,\n          isVolumeChangeSupported: result\n        }\n      }));\n    });\n  } catch (e) {\n    console.error(e);\n  }\n  const onLoadedMetadata = () => {\n    store.getState().__controlsFunctions.onCanPlay();\n    store.getState().__controlsFunctions.requestMeasure();\n  };\n  const onLoadedData = () => {\n    store.getState().__controlsFunctions.requestMeasure();\n  };\n  const onPlay = () => {\n    store.getState().__controlsFunctions.onPlay();\n  };\n  const onPause = () => {\n    store.getState().__controlsFunctions.onPause();\n  };\n  const onDurationChange = () => store.getState().__controlsFunctions.onDurationChange(element?.duration ?? 0);\n  const onKeyUp = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const code = e.code;\n    store.getState().__controlsFunctions.updateLastInteraction();\n    const isNotBroadcast = store.getState().__initialProps.hotkeys !== \"broadcast\";\n    if (allKeyTriggers.includes(code)) {\n      if ((code === \"Space\" || code === \"KeyK\") && isNotBroadcast) {\n        store.getState().__controlsFunctions.togglePlay();\n      } else if (code === \"ArrowRight\" && isNotBroadcast) {\n        store.getState().__controlsFunctions.requestSeekForward();\n      } else if (code === \"ArrowLeft\" && isNotBroadcast) {\n        store.getState().__controlsFunctions.requestSeekBack();\n      } else if (code === \"KeyM\" && isNotBroadcast) {\n        store.getState().__controlsFunctions.requestToggleMute();\n      } else if (code === \"KeyX\" && isNotBroadcast) {\n        store.getState().__controlsFunctions.requestClip();\n      } else if (code === \"KeyF\") {\n        store.getState().__controlsFunctions.requestToggleFullscreen();\n      } else if (code === \"KeyI\") {\n        store.getState().__controlsFunctions.requestTogglePictureInPicture();\n      }\n    }\n  };\n  const onMouseUpdate = () => {\n    store.getState().__controlsFunctions.updateLastInteraction();\n  };\n  const onTouchUpdate = async () => {\n    store.getState().__controlsFunctions.updateLastInteraction();\n  };\n  const onVolumeChange = () => {\n    store.getState().__controlsFunctions.setVolume(element.muted ? 0 : element.volume ?? 0);\n  };\n  const onRateChange = () => {\n    store.getState().__controlsFunctions.setPlaybackRate(element.playbackRate);\n  };\n  const onTimeUpdate = () => {\n    store.getState().__controlsFunctions.onProgress(element?.currentTime ?? 0);\n    if (element && (element?.duration ?? 0) > 0) {\n      const currentTime = element.currentTime;\n      const buffered = [...Array(element.buffered.length)].reduce(\n        (prev, _curr, i) => {\n          const start = element.buffered.start(element.buffered.length - 1 - i);\n          const end = element.buffered.end(element.buffered.length - 1 - i);\n          if (start <= currentTime && end >= currentTime) {\n            return end;\n          }\n          return prev;\n        },\n        // default to no buffering\n        0\n      );\n      store.getState().__controlsFunctions.updateBuffered(buffered);\n    }\n  };\n  const onError = async (e) => {\n    const source = store.getState().currentSource;\n    if (source?.type === \"video\") {\n      const sourceElement = e.target;\n      const parentElement = sourceElement?.parentElement;\n      const videoUrl = parentElement?.currentSrc ?? sourceElement?.currentSrc;\n      if (videoUrl) {\n        try {\n          const response = await fetch(videoUrl);\n          if (response.status === 404) {\n            console.warn(\"Video not found\");\n            return store.getState().__controlsFunctions?.onError?.(\n              new Error(_livepeer_core_errors__WEBPACK_IMPORTED_MODULE_0__.STREAM_OFFLINE_ERROR_MESSAGE)\n            );\n          }\n          if (response.status === 401) {\n            console.warn(\"Unauthorized to view video\");\n            return store.getState().__controlsFunctions?.onError?.(\n              new Error(_livepeer_core_errors__WEBPACK_IMPORTED_MODULE_0__.ACCESS_CONTROL_ERROR_MESSAGE)\n            );\n          }\n        } catch (err) {\n          console.warn(err);\n          return store.getState().__controlsFunctions?.onError?.(\n            new Error(\"Error fetching video URL\")\n          );\n        }\n      }\n      console.warn(\"Unknown error loading video\");\n      return store.getState().__controlsFunctions?.onError?.(\n        new Error(\"Unknown error loading video\")\n      );\n    }\n    store.getState().__controlsFunctions.onError(new Error(e?.message));\n  };\n  const onWaiting = async () => {\n    store.getState().__controlsFunctions.onWaiting();\n  };\n  const onStalled = async () => {\n    store.getState().__controlsFunctions.onStalled();\n  };\n  const onLoadStart = async () => {\n    store.getState().__controlsFunctions.onLoading();\n  };\n  const onEnded = async () => {\n    store.getState().__controlsFunctions.onEnded();\n  };\n  const onResize = async () => {\n    store.getState().__controlsFunctions.requestMeasure();\n  };\n  const parentElementOrElement = element?.parentElement ?? element;\n  if (element) {\n    element.addEventListener(\"volumechange\", onVolumeChange);\n    element.addEventListener(\"ratechange\", onRateChange);\n    element.addEventListener(\"loadedmetadata\", onLoadedMetadata);\n    element.addEventListener(\"loadeddata\", onLoadedData);\n    element.addEventListener(\"play\", onPlay);\n    element.addEventListener(\"playing\", onPlay);\n    element.addEventListener(\"pause\", onPause);\n    element.addEventListener(\"durationchange\", onDurationChange);\n    element.addEventListener(\"timeupdate\", onTimeUpdate);\n    element.addEventListener(\"error\", onError);\n    element.addEventListener(\"waiting\", onWaiting);\n    element.addEventListener(\"stalled\", onStalled);\n    element.addEventListener(\"loadstart\", onLoadStart);\n    element.addEventListener(\"ended\", onEnded);\n    parentElementOrElement?.addEventListener(\"mouseout\", onMouseUpdate);\n    parentElementOrElement?.addEventListener(\"mousemove\", onMouseUpdate);\n    parentElementOrElement?.addEventListener(\"touchstart\", onTouchUpdate);\n    parentElementOrElement?.addEventListener(\"touchend\", onTouchUpdate);\n    parentElementOrElement?.addEventListener(\"touchmove\", onTouchUpdate);\n    if (typeof window !== \"undefined\") {\n      window?.addEventListener?.(\"resize\", onResize);\n    }\n    parentElementOrElement?.addEventListener(\"keyup\", onKeyUp);\n    parentElementOrElement?.setAttribute(\"tabindex\", \"0\");\n    element.setAttribute(MEDIA_CONTROLLER_INITIALIZED_ATTRIBUTE, \"true\");\n  }\n  const onFullscreenChange = () => {\n    store.getState().__controlsFunctions.setFullscreen(isCurrentlyFullscreen(element));\n  };\n  const onEnterPictureInPicture = () => {\n    store.getState().__controlsFunctions.setPictureInPicture(true);\n  };\n  const onExitPictureInPicture = () => {\n    store.getState().__controlsFunctions.setPictureInPicture(false);\n  };\n  const removeEffectsFromStore = addEffectsToStore(element, store);\n  const removeFullscreenListener = addFullscreenEventListener(\n    element,\n    onFullscreenChange\n  );\n  const removeEnterPictureInPictureListener = addEnterPictureInPictureEventListener(element, onEnterPictureInPicture);\n  const removeExitPictureInPictureListener = addExitPictureInPictureEventListener(element, onExitPictureInPicture);\n  return {\n    destroy: () => {\n      removeFullscreenListener?.();\n      removeEnterPictureInPictureListener?.();\n      removeExitPictureInPictureListener?.();\n      element?.removeEventListener?.(\"ratechange\", onRateChange);\n      element?.removeEventListener?.(\"volumechange\", onVolumeChange);\n      element?.removeEventListener?.(\"loadedmetadata\", onLoadedMetadata);\n      element?.removeEventListener?.(\"loadeddata\", onLoadedData);\n      element?.removeEventListener?.(\"play\", onPlay);\n      element?.removeEventListener?.(\"playing\", onPlay);\n      element?.removeEventListener?.(\"pause\", onPause);\n      element?.removeEventListener?.(\"durationchange\", onDurationChange);\n      element?.removeEventListener?.(\"timeupdate\", onTimeUpdate);\n      element?.removeEventListener?.(\"error\", onError);\n      element?.removeEventListener?.(\"waiting\", onWaiting);\n      element?.removeEventListener?.(\"stalled\", onStalled);\n      element?.removeEventListener?.(\"loadstart\", onLoadStart);\n      element?.removeEventListener?.(\"ended\", onEnded);\n      if (typeof window !== \"undefined\") {\n        window?.removeEventListener?.(\"resize\", onResize);\n      }\n      parentElementOrElement?.removeEventListener?.(\"mouseout\", onMouseUpdate);\n      parentElementOrElement?.removeEventListener?.(\"mousemove\", onMouseUpdate);\n      parentElementOrElement?.removeEventListener?.(\n        \"touchstart\",\n        onTouchUpdate\n      );\n      parentElementOrElement?.removeEventListener?.(\"touchend\", onTouchUpdate);\n      parentElementOrElement?.removeEventListener?.(\"touchmove\", onTouchUpdate);\n      parentElementOrElement?.removeEventListener?.(\"keyup\", onKeyUp);\n      removeEffectsFromStore?.();\n      element?.removeAttribute?.(MEDIA_CONTROLLER_INITIALIZED_ATTRIBUTE);\n    }\n  };\n};\nvar cleanupSource = () => {\n};\nvar cleanupPosterImage = () => {\n};\nvar addEffectsToStore = (element, store) => {\n  const destroySource = store.subscribe(\n    ({\n      __initialProps,\n      __controls,\n      currentSource,\n      errorCount,\n      progress,\n      mounted,\n      videoQuality\n    }) => ({\n      aspectRatio: __initialProps.aspectRatio,\n      autoPlay: __initialProps.autoPlay,\n      backoff: __initialProps.backoff,\n      backoffMax: __initialProps.backoffMax,\n      calculateDelay: __initialProps.calculateDelay,\n      errorCount,\n      lastError: __controls.lastError,\n      hlsConfig: __controls.hlsConfig,\n      mounted,\n      progress,\n      source: currentSource,\n      timeout: __initialProps.timeout,\n      videoQuality\n    }),\n    async ({\n      aspectRatio,\n      autoPlay,\n      // biome-ignore lint/correctness/noUnusedFunctionParameters: ignored using `--suppress`\n      backoff,\n      // biome-ignore lint/correctness/noUnusedFunctionParameters: ignored using `--suppress`\n      backoffMax,\n      calculateDelay,\n      errorCount,\n      // biome-ignore lint/correctness/noUnusedFunctionParameters: ignored using `--suppress`\n      lastError,\n      hlsConfig,\n      mounted,\n      progress,\n      source,\n      timeout,\n      videoQuality\n    }) => {\n      if (!mounted) {\n        return;\n      }\n      await cleanupSource?.();\n      await delay(\n        Math.max(calculateDelay(errorCount), errorCount === 0 ? 0 : 100)\n      );\n      let unmounted = false;\n      if (!source) {\n        return;\n      }\n      let jumped = false;\n      const jumpToPreviousPosition = () => {\n        const live = store.getState().live;\n        if (!live && progress && !jumped) {\n          element.currentTime = progress;\n          jumped = true;\n        }\n      };\n      const onErrorComposed = (err) => {\n        if (!unmounted) {\n          cleanupSource?.();\n          store.getState().__controlsFunctions?.onError?.(err);\n        }\n      };\n      if (source.type === \"webrtc\") {\n        const unsubscribeBframes = store.subscribe(\n          (state) => state?.__metadata,\n          (metadata) => {\n            let webrtcIsPossibleForOneTrack = false;\n            if (metadata?.meta?.tracks) {\n              for (const trackId of Object.keys(metadata.meta.tracks)) {\n                if (metadata?.meta?.tracks[trackId]?.bframes !== 1) {\n                  webrtcIsPossibleForOneTrack = true;\n                }\n              }\n            }\n            const shouldNotFallBackToHLS = webrtcIsPossibleForOneTrack || metadata?.meta?.bframes === 0;\n            if (!shouldNotFallBackToHLS && !unmounted) {\n              onErrorComposed(new Error(_livepeer_core_errors__WEBPACK_IMPORTED_MODULE_0__.BFRAMES_ERROR_MESSAGE));\n            }\n          }\n        );\n        const { destroy } = createNewWHEP({\n          source: source.src,\n          element,\n          callbacks: {\n            onConnected: () => {\n              store.getState().__controlsFunctions.setLive(true);\n              jumpToPreviousPosition();\n            },\n            onError: onErrorComposed,\n            onPlaybackOffsetUpdated: store.getState().__controlsFunctions.updatePlaybackOffsetMs,\n            onRedirect: store.getState().__controlsFunctions.onFinalUrl\n          },\n          accessControl: {\n            jwt: store.getState().__initialProps.jwt,\n            accessKey: store.getState().__initialProps.accessKey\n          },\n          sdpTimeout: timeout,\n          iceServers: store.getState().__initialProps.iceServers\n        });\n        const id = setTimeout(() => {\n          if (!store.getState().canPlay && !unmounted) {\n            store.getState().__controlsFunctions.onWebRTCTimeout?.();\n            onErrorComposed(\n              new Error(\n                \"Timeout reached for canPlay - triggering playback error.\"\n              )\n            );\n          }\n        }, timeout);\n        cleanupSource = () => {\n          unmounted = true;\n          clearTimeout(id);\n          destroy?.();\n          unsubscribeBframes?.();\n        };\n        return;\n      }\n      if (source.type === \"hls\") {\n        const indexUrl = /\\/hls\\/[^/\\s]+\\/index\\.m3u8/;\n        const onErrorCleaned = (error) => {\n          const cleanError = new Error(\n            error?.response?.data?.toString?.() ?? (error?.response?.code === 401 ? _livepeer_core_errors__WEBPACK_IMPORTED_MODULE_0__.ACCESS_CONTROL_ERROR_MESSAGE : \"Error with HLS.js\")\n          );\n          onErrorComposed?.(cleanError);\n        };\n        const hlsConfigResolved = hlsConfig;\n        const { destroy, setQuality: setQuality2 } = createNewHls({\n          source: source?.src,\n          element,\n          initialQuality: videoQuality,\n          aspectRatio: aspectRatio ?? 16 / 9,\n          callbacks: {\n            onLive: store.getState().__controlsFunctions.setLive,\n            onDuration: store.getState().__controlsFunctions.onDurationChange,\n            onCanPlay: () => {\n              store.getState().__controlsFunctions.onCanPlay();\n              jumpToPreviousPosition();\n              store.getState().__controlsFunctions.onError(null);\n            },\n            onError: onErrorCleaned,\n            onPlaybackOffsetUpdated: store.getState().__controlsFunctions.updatePlaybackOffsetMs,\n            onRedirect: store.getState().__controlsFunctions.onFinalUrl\n          },\n          config: {\n            ...hlsConfigResolved ?? {},\n            async xhrSetup(xhr, url) {\n              if (hlsConfigResolved?.xhrSetup) {\n                await hlsConfigResolved?.xhrSetup?.(xhr, url);\n              } else {\n                const live = store.getState().live;\n                if (!live || url.match(indexUrl)) {\n                  const jwt = store.getState().__initialProps.jwt;\n                  const accessKey = store.getState().__initialProps.accessKey;\n                  if (accessKey)\n                    xhr.setRequestHeader(\"Livepeer-Access-Key\", accessKey);\n                  else if (jwt) xhr.setRequestHeader(\"Livepeer-Jwt\", jwt);\n                }\n              }\n            },\n            autoPlay\n          }\n        });\n        const unsubscribeQualityUpdate = store.subscribe(\n          (state) => state.videoQuality,\n          (newQuality) => {\n            setQuality2(newQuality);\n          }\n        );\n        cleanupSource = () => {\n          unmounted = true;\n          destroy?.();\n          unsubscribeQualityUpdate?.();\n        };\n        return;\n      }\n      if (source?.type === \"video\") {\n        store.getState().__controlsFunctions.onFinalUrl(source.src);\n        element.addEventListener(\"canplay\", jumpToPreviousPosition);\n        element.src = source.src;\n        element.load();\n        cleanupSource = () => {\n          unmounted = true;\n          element?.removeEventListener?.(\"canplay\", jumpToPreviousPosition);\n        };\n        return;\n      }\n    },\n    {\n      equalityFn: (a, b) => {\n        const errorCountChanged = a.errorCount !== b.errorCount && b.errorCount !== 0;\n        const lastErrorChanged = a.lastError !== b.lastError;\n        const sourceChanged = a.source?.src !== b.source?.src;\n        const mountedChanged = a.mounted !== b.mounted;\n        const shouldReRender = errorCountChanged || lastErrorChanged || sourceChanged || mountedChanged;\n        return !shouldReRender;\n      }\n    }\n  );\n  const destroyPosterImage = store.subscribe(\n    ({ __controls, live, __controlsFunctions, __initialProps }) => ({\n      thumbnail: __controls.thumbnail?.src,\n      live,\n      setPoster: __controlsFunctions.setPoster,\n      posterLiveUpdate: __initialProps.posterLiveUpdate\n    }),\n    async ({ thumbnail, live, setPoster, posterLiveUpdate }) => {\n      cleanupPosterImage?.();\n      if (thumbnail && live && posterLiveUpdate > 0) {\n        const interval = setInterval(() => {\n          const thumbnailUrl = new URL(thumbnail);\n          thumbnailUrl.searchParams.set(\"v\", Date.now().toFixed(0));\n          setPoster(thumbnailUrl.toString());\n        }, posterLiveUpdate);\n        cleanupPosterImage = () => clearInterval(interval);\n      }\n    },\n    {\n      equalityFn: (a, b) => a.thumbnail === b.thumbnail && a.live === b.live\n    }\n  );\n  const destroyPlayPause = store.subscribe(\n    (state) => state.__controls.requestedPlayPauseLastTime,\n    async () => {\n      if (element.paused) {\n        await element.play();\n      } else {\n        await element.pause();\n      }\n    }\n  );\n  const destroyPlaybackRate = store.subscribe(\n    (state) => state.playbackRate,\n    (current) => {\n      element.playbackRate = current === \"constant\" ? 1 : current;\n    }\n  );\n  const destroyVolume = store.subscribe(\n    (state) => ({\n      playing: state.playing,\n      volume: state.volume,\n      isVolumeChangeSupported: state.__device.isVolumeChangeSupported\n    }),\n    (current) => {\n      if (current.isVolumeChangeSupported) {\n        element.volume = current.volume;\n      }\n    },\n    {\n      equalityFn: (a, b) => a.volume === b.volume && a.playing === b.playing && a.isVolumeChangeSupported === b.isVolumeChangeSupported\n    }\n  );\n  const destroyMute = store.subscribe(\n    (state) => state.__controls.muted,\n    (current, prev) => {\n      if (current !== prev) {\n        element.muted = current;\n      }\n    }\n  );\n  const destroySeeking = store.subscribe(\n    (state) => state.__controls.requestedRangeToSeekTo,\n    (current) => {\n      if (typeof element.readyState === \"undefined\" || element.readyState > 0) {\n        element.currentTime = current;\n      }\n    }\n  );\n  const destroyFullscreen = store.subscribe(\n    (state) => state.__controls.requestedFullscreenLastTime,\n    async () => {\n      const isFullscreen = isCurrentlyFullscreen(element);\n      if (isFullscreen) exitFullscreen(element);\n      else enterFullscreen(element);\n    }\n  );\n  const destroyPictureInPicture = store.subscribe(\n    (state) => state.__controls.requestedPictureInPictureLastTime,\n    async () => {\n      try {\n        const isPictureInPicture = await isCurrentlyPictureInPicture(element);\n        if (isPictureInPicture) await exitPictureInPicture(element);\n        else await enterPictureInPicture(element);\n      } catch (e) {\n        (0,_livepeer_core_utils__WEBPACK_IMPORTED_MODULE_1__.warn)(e?.message ?? \"Picture in picture is not supported\");\n        store.setState((state) => ({\n          __device: {\n            ...state.__device,\n            isPictureInPictureSupported: false\n          }\n        }));\n      }\n    }\n  );\n  const destroyAutohide = store.subscribe(\n    (state) => ({\n      lastInteraction: state.__controls.lastInteraction,\n      autohide: state.__controls.autohide\n    }),\n    async ({ lastInteraction, autohide }) => {\n      if (autohide && lastInteraction) {\n        store.getState().__controlsFunctions.setHidden(false);\n        await delay(autohide);\n        const parentElementOrElement = element?.parentElement ?? element;\n        const openElement = parentElementOrElement?.querySelector?.(\n          '[data-state=\"open\"]'\n        );\n        if (!openElement && !store.getState().hidden && lastInteraction === store.getState().__controls.lastInteraction) {\n          store.getState().__controlsFunctions.setHidden(true);\n        }\n      }\n    },\n    {\n      equalityFn: (a, b) => a?.lastInteraction === b?.lastInteraction && a?.autohide === b?.autohide\n    }\n  );\n  const destroyRequestSizing = store.subscribe(\n    (state) => ({\n      lastTime: state.__controls.requestedMeasureLastTime,\n      fullscreen: state.fullscreen\n    }),\n    async () => {\n      store.getState().__controlsFunctions.setSize({\n        ...element?.videoHeight && element?.videoWidth ? {\n          media: {\n            height: element.videoHeight,\n            width: element.videoWidth\n          }\n        } : {},\n        ...element?.clientHeight && element?.clientWidth ? {\n          container: {\n            height: element.clientHeight,\n            width: element.clientWidth\n          }\n        } : {},\n        ...typeof window !== \"undefined\" && window?.innerHeight && window?.innerWidth ? {\n          window: {\n            height: window.innerHeight,\n            width: window.innerWidth\n          }\n        } : {}\n      });\n    },\n    {\n      equalityFn: (a, b) => a?.fullscreen === b?.fullscreen && a?.lastTime === b?.lastTime\n    }\n  );\n  const destroyMediaSizing = store.subscribe(\n    (state) => state.__controls.size?.media,\n    async (media) => {\n      const parentElementOrElement = element?.parentElement ?? element;\n      if (parentElementOrElement) {\n        if (media?.height && media?.width) {\n          const elementStyle = parentElementOrElement.style;\n          elementStyle.setProperty(\n            \"--livepeer-media-height\",\n            `${media.height}px`\n          );\n          elementStyle.setProperty(\n            \"--livepeer-media-width\",\n            `${media.width}px`\n          );\n        }\n      }\n    },\n    {\n      equalityFn: (a, b) => a?.height === b?.height && a?.width === b?.width\n    }\n  );\n  const destroyContainerSizing = store.subscribe(\n    (state) => state.__controls.size?.container,\n    async (container) => {\n      const parentElementOrElement = element?.parentElement ?? element;\n      if (parentElementOrElement) {\n        if (container?.height && container?.width) {\n          const elementStyle = parentElementOrElement.style;\n          elementStyle.setProperty(\n            \"--livepeer-container-height\",\n            `${container.height}px`\n          );\n          elementStyle.setProperty(\n            \"--livepeer-container-width\",\n            `${container.width}px`\n          );\n        }\n      }\n    },\n    {\n      equalityFn: (a, b) => a?.height === b?.height && a?.width === b?.width\n    }\n  );\n  return () => {\n    destroyAutohide?.();\n    destroyContainerSizing?.();\n    destroyFullscreen?.();\n    destroyMediaSizing?.();\n    destroyMute?.();\n    destroyPictureInPicture?.();\n    destroyPlaybackRate?.();\n    destroyPlayPause?.();\n    destroyPosterImage?.();\n    destroyRequestSizing?.();\n    destroySeeking?.();\n    destroyVolume?.();\n    destroySource?.();\n    cleanupPosterImage?.();\n    cleanupSource?.();\n  };\n};\n\n// src/media/controls/device.ts\nvar getDeviceInfo = (version2) => ({\n  version: version2,\n  isAndroid: isAndroid(),\n  isIos: isIos(),\n  isMobile: isMobile(),\n  userAgent: typeof navigator !== \"undefined\" ? navigator.userAgent : \"Node.js or unknown\",\n  screenWidth: typeof window !== \"undefined\" && window?.screen ? window?.screen?.width ?? null : null,\n  isFullscreenSupported: isFullscreenSupported(),\n  isWebRTCSupported: Boolean(getRTCPeerConnectionConstructor()),\n  isPictureInPictureSupported: isPictureInPictureSupported(),\n  isHlsSupported: isHlsSupported(),\n  isVolumeChangeSupported: true\n});\n\n// src/media/metrics.ts\n\n\n\nfunction addMediaMetrics(element, opts = {}) {\n  if (element) {\n    const source = opts?.src ?? element?.src ?? null;\n    const { store, destroy } = (0,_livepeer_core_media__WEBPACK_IMPORTED_MODULE_2__.createControllerStore)({\n      src: source,\n      playbackId: opts?.playbackId,\n      device: getDeviceInfo(_livepeer_core_version__WEBPACK_IMPORTED_MODULE_5__.version.core),\n      storage: (0,_livepeer_core_storage__WEBPACK_IMPORTED_MODULE_4__.createStorage)({ storage: _livepeer_core_storage__WEBPACK_IMPORTED_MODULE_4__.noopStorage }),\n      initialProps: {\n        autoPlay: Boolean(element?.autoplay),\n        volume: element?.muted ? 0 : element?.volume,\n        preload: element?.preload === \"\" ? \"auto\" : element?.preload,\n        playbackRate: element?.playbackRate,\n        hotkeys: false,\n        posterLiveUpdate: 0,\n        ...opts,\n        onError(error) {\n          if (error) {\n            opts?.onError?.(error);\n          }\n        }\n      }\n    });\n    const { destroy: destroyListeners } = addEventListeners(element, store);\n    const { destroy: destroyMetrics } = (0,_livepeer_core_media__WEBPACK_IMPORTED_MODULE_2__.addMetricsToStore)(store, {\n      disableProgressListener: opts.disableProgressListener,\n      interval: opts.interval,\n      onPlaybackEvents: opts.onPlaybackEvents\n    });\n    const { destroy: destroyLegacyMetrics, metrics: legacyMetrics } = (0,_livepeer_core_media__WEBPACK_IMPORTED_MODULE_2__.addLegacyMediaMetricsToStore)(store, {\n      disableProgressListener: opts.disableProgressListener\n    });\n    store.getState().__controlsFunctions.onFinalUrl(\n      source ?? \"https://vod-cdn.lp-playback.studio\"\n    );\n    return {\n      /** @deprecated */\n      legacyMetrics,\n      destroy: () => {\n        destroy?.();\n        destroyListeners?.();\n        destroyMetrics?.();\n        destroyLegacyMetrics?.();\n      }\n    };\n  }\n  return {\n    destroy: () => {\n    }\n  };\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livepeer/core-web/dist/browser/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livepeer/core/dist/errors/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@livepeer/core/dist/errors/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCESS_CONTROL_ERROR_MESSAGE: () => (/* binding */ ACCESS_CONTROL_ERROR_MESSAGE),\n/* harmony export */   BFRAMES_ERROR_MESSAGE: () => (/* binding */ BFRAMES_ERROR_MESSAGE),\n/* harmony export */   NOT_ACCEPTABLE_ERROR_MESSAGE: () => (/* binding */ NOT_ACCEPTABLE_ERROR_MESSAGE),\n/* harmony export */   PERMISSIONS_ERROR_MESSAGE: () => (/* binding */ PERMISSIONS_ERROR_MESSAGE),\n/* harmony export */   STREAM_OFFLINE_ERROR_MESSAGE: () => (/* binding */ STREAM_OFFLINE_ERROR_MESSAGE),\n/* harmony export */   STREAM_OPEN_ERROR_MESSAGE: () => (/* binding */ STREAM_OPEN_ERROR_MESSAGE),\n/* harmony export */   isAccessControlError: () => (/* binding */ isAccessControlError),\n/* harmony export */   isBframesError: () => (/* binding */ isBframesError),\n/* harmony export */   isNotAcceptableError: () => (/* binding */ isNotAcceptableError),\n/* harmony export */   isPermissionsError: () => (/* binding */ isPermissionsError),\n/* harmony export */   isStreamOfflineError: () => (/* binding */ isStreamOfflineError)\n/* harmony export */ });\n// src/media/errors.ts\nvar STREAM_OPEN_ERROR_MESSAGE = \"stream open failed\";\nvar STREAM_OFFLINE_ERROR_MESSAGE = \"stream is offline\";\nvar STREAM_WAITING_FOR_DATA_ERROR_MESSAGE = \"stream is waiting for data\";\nvar ACCESS_CONTROL_ERROR_MESSAGE = \"shutting down since this session is not allowed to view this stream\";\nvar BFRAMES_ERROR_MESSAGE = \"metadata indicates that webrtc playback contains bframes\";\nvar NOT_ACCEPTABLE_ERROR_MESSAGE = \"response indicates unacceptable playback protocol\";\nvar PERMISSIONS_ERROR_MESSAGE = \"user did not allow the permissions request\";\nvar isStreamOfflineError = (error) => error.message.toLowerCase().includes(STREAM_OPEN_ERROR_MESSAGE) || error.message.toLowerCase().includes(STREAM_WAITING_FOR_DATA_ERROR_MESSAGE) || error.message.toLowerCase().includes(STREAM_OFFLINE_ERROR_MESSAGE);\nvar isAccessControlError = (error) => error.message.toLowerCase().includes(ACCESS_CONTROL_ERROR_MESSAGE);\nvar isBframesError = (error) => error.message.toLowerCase().includes(BFRAMES_ERROR_MESSAGE);\nvar isNotAcceptableError = (error) => error.message.toLowerCase().includes(NOT_ACCEPTABLE_ERROR_MESSAGE);\nvar isPermissionsError = (error) => error.message.toLowerCase().includes(PERMISSIONS_ERROR_MESSAGE);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVwZWVyL2NvcmUvZGlzdC9lcnJvcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWFFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWt0b2stdG9rZW4tbGF1bmNocGFkLy4vbm9kZV9tb2R1bGVzL0BsaXZlcGVlci9jb3JlL2Rpc3QvZXJyb3JzL2luZGV4LmpzP2EyYjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL21lZGlhL2Vycm9ycy50c1xudmFyIFNUUkVBTV9PUEVOX0VSUk9SX01FU1NBR0UgPSBcInN0cmVhbSBvcGVuIGZhaWxlZFwiO1xudmFyIFNUUkVBTV9PRkZMSU5FX0VSUk9SX01FU1NBR0UgPSBcInN0cmVhbSBpcyBvZmZsaW5lXCI7XG52YXIgU1RSRUFNX1dBSVRJTkdfRk9SX0RBVEFfRVJST1JfTUVTU0FHRSA9IFwic3RyZWFtIGlzIHdhaXRpbmcgZm9yIGRhdGFcIjtcbnZhciBBQ0NFU1NfQ09OVFJPTF9FUlJPUl9NRVNTQUdFID0gXCJzaHV0dGluZyBkb3duIHNpbmNlIHRoaXMgc2Vzc2lvbiBpcyBub3QgYWxsb3dlZCB0byB2aWV3IHRoaXMgc3RyZWFtXCI7XG52YXIgQkZSQU1FU19FUlJPUl9NRVNTQUdFID0gXCJtZXRhZGF0YSBpbmRpY2F0ZXMgdGhhdCB3ZWJydGMgcGxheWJhY2sgY29udGFpbnMgYmZyYW1lc1wiO1xudmFyIE5PVF9BQ0NFUFRBQkxFX0VSUk9SX01FU1NBR0UgPSBcInJlc3BvbnNlIGluZGljYXRlcyB1bmFjY2VwdGFibGUgcGxheWJhY2sgcHJvdG9jb2xcIjtcbnZhciBQRVJNSVNTSU9OU19FUlJPUl9NRVNTQUdFID0gXCJ1c2VyIGRpZCBub3QgYWxsb3cgdGhlIHBlcm1pc3Npb25zIHJlcXVlc3RcIjtcbnZhciBpc1N0cmVhbU9mZmxpbmVFcnJvciA9IChlcnJvcikgPT4gZXJyb3IubWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKFNUUkVBTV9PUEVOX0VSUk9SX01FU1NBR0UpIHx8IGVycm9yLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhTVFJFQU1fV0FJVElOR19GT1JfREFUQV9FUlJPUl9NRVNTQUdFKSB8fCBlcnJvci5tZXNzYWdlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoU1RSRUFNX09GRkxJTkVfRVJST1JfTUVTU0FHRSk7XG52YXIgaXNBY2Nlc3NDb250cm9sRXJyb3IgPSAoZXJyb3IpID0+IGVycm9yLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhBQ0NFU1NfQ09OVFJPTF9FUlJPUl9NRVNTQUdFKTtcbnZhciBpc0JmcmFtZXNFcnJvciA9IChlcnJvcikgPT4gZXJyb3IubWVzc2FnZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKEJGUkFNRVNfRVJST1JfTUVTU0FHRSk7XG52YXIgaXNOb3RBY2NlcHRhYmxlRXJyb3IgPSAoZXJyb3IpID0+IGVycm9yLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhOT1RfQUNDRVBUQUJMRV9FUlJPUl9NRVNTQUdFKTtcbnZhciBpc1Blcm1pc3Npb25zRXJyb3IgPSAoZXJyb3IpID0+IGVycm9yLm1lc3NhZ2UudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhQRVJNSVNTSU9OU19FUlJPUl9NRVNTQUdFKTtcbmV4cG9ydCB7XG4gIEFDQ0VTU19DT05UUk9MX0VSUk9SX01FU1NBR0UsXG4gIEJGUkFNRVNfRVJST1JfTUVTU0FHRSxcbiAgTk9UX0FDQ0VQVEFCTEVfRVJST1JfTUVTU0FHRSxcbiAgUEVSTUlTU0lPTlNfRVJST1JfTUVTU0FHRSxcbiAgU1RSRUFNX09GRkxJTkVfRVJST1JfTUVTU0FHRSxcbiAgU1RSRUFNX09QRU5fRVJST1JfTUVTU0FHRSxcbiAgaXNBY2Nlc3NDb250cm9sRXJyb3IsXG4gIGlzQmZyYW1lc0Vycm9yLFxuICBpc05vdEFjY2VwdGFibGVFcnJvcixcbiAgaXNQZXJtaXNzaW9uc0Vycm9yLFxuICBpc1N0cmVhbU9mZmxpbmVFcnJvclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livepeer/core/dist/errors/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livepeer/core/dist/media/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@livepeer/core/dist/media/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addLegacyMediaMetricsToStore: () => (/* binding */ addLegacyMediaMetricsToStore),\n/* harmony export */   addMetricsToStore: () => (/* binding */ addMetricsToStore),\n/* harmony export */   calculateVideoQualityDimensions: () => (/* binding */ calculateVideoQualityDimensions),\n/* harmony export */   createControllerStore: () => (/* binding */ createControllerStore),\n/* harmony export */   getBoundedVolume: () => (/* binding */ getBoundedVolume),\n/* harmony export */   getMediaSourceType: () => (/* binding */ getMediaSourceType)\n/* harmony export */ });\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand/middleware */ \"(ssr)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var zustand_vanilla__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/vanilla */ \"(ssr)/./node_modules/zustand/esm/vanilla.mjs\");\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/nanoid/index.js\");\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! multiformats/cid */ \"(ssr)/./node_modules/multiformats/dist/src/cid.js\");\n// src/media/controller.ts\n\n\n\n// src/media/errors.ts\nvar STREAM_OPEN_ERROR_MESSAGE = \"stream open failed\";\nvar STREAM_OFFLINE_ERROR_MESSAGE = \"stream is offline\";\nvar STREAM_WAITING_FOR_DATA_ERROR_MESSAGE = \"stream is waiting for data\";\nvar ACCESS_CONTROL_ERROR_MESSAGE = \"shutting down since this session is not allowed to view this stream\";\nvar BFRAMES_ERROR_MESSAGE = \"metadata indicates that webrtc playback contains bframes\";\nvar NOT_ACCEPTABLE_ERROR_MESSAGE = \"response indicates unacceptable playback protocol\";\nvar PERMISSIONS_ERROR_MESSAGE = \"user did not allow the permissions request\";\nvar isStreamOfflineError = (error) => error.message.toLowerCase().includes(STREAM_OPEN_ERROR_MESSAGE) || error.message.toLowerCase().includes(STREAM_WAITING_FOR_DATA_ERROR_MESSAGE) || error.message.toLowerCase().includes(STREAM_OFFLINE_ERROR_MESSAGE);\nvar isAccessControlError = (error) => error.message.toLowerCase().includes(ACCESS_CONTROL_ERROR_MESSAGE);\nvar isBframesError = (error) => error.message.toLowerCase().includes(BFRAMES_ERROR_MESSAGE);\nvar isNotAcceptableError = (error) => error.message.toLowerCase().includes(NOT_ACCEPTABLE_ERROR_MESSAGE);\nvar isPermissionsError = (error) => error.message.toLowerCase().includes(PERMISSIONS_ERROR_MESSAGE);\n\n// src/media/utils.ts\n\n\n// src/media/metrics-utils.ts\nvar getMetricsReportingPOSTUrl = async (opts) => {\n  const resolvedReportingUrl = await getMetricsReportingUrl({\n    playbackUrl: opts.playbackUrl,\n    path: \"/analytics/log\"\n  });\n  if (!resolvedReportingUrl) {\n    return null;\n  }\n  return resolvedReportingUrl?.toString?.() ?? null;\n};\nvar getMetricsReportingWebsocketUrl = async (opts) => {\n  if (!opts.playbackId) {\n    return null;\n  }\n  const resolvedReportingUrl = await getMetricsReportingUrl({\n    playbackUrl: opts.playbackUrl,\n    path: `/json_video+${opts.playbackId}.js`\n  });\n  if (!resolvedReportingUrl) {\n    return null;\n  }\n  resolvedReportingUrl.protocol = \"wss:\";\n  if (resolvedReportingUrl && opts.sessionToken) {\n    resolvedReportingUrl.searchParams.set(\"tkn\", opts.sessionToken);\n  }\n  return resolvedReportingUrl?.toString?.() ?? null;\n};\nvar LP_DOMAINS = [\"livepeer\", \"livepeercdn\", \"lp-playback\"];\nvar getMetricsReportingUrl = async ({\n  playbackUrl,\n  path\n}) => {\n  try {\n    const parsedPlaybackUrl = new URL(playbackUrl);\n    const splitHost = parsedPlaybackUrl.host.split(\".\");\n    const includesDomain = LP_DOMAINS.includes(\n      splitHost?.[splitHost.length - 2] ?? \"\"\n    );\n    const tld = splitHost?.[splitHost?.length - 1] ?? null;\n    const tldMapped = tld === \"com\" ? \"studio\" : tld === \"studio\" ? \"studio\" : tld === \"fun\" ? \"fun:20443\" : tld === \"monster\" ? \"monster\" : null;\n    if (includesDomain && tldMapped) {\n      const isCatalystPlayback = parsedPlaybackUrl.host.includes(\"catalyst\");\n      try {\n        const getRedirectedUrl = async () => {\n          const response = await fetch(\n            `https://playback.livepeer.${tldMapped}${path}`\n          );\n          await response.text();\n          return response?.url ?? null;\n        };\n        const finalUrl = isCatalystPlayback ? `https://${parsedPlaybackUrl.host}${path}` : await getRedirectedUrl();\n        const url = finalUrl ? new URL(finalUrl) : null;\n        return url ?? null;\n      } catch (error) {\n        console.log(\"Could not fetch reporting URL.\", error);\n      }\n    }\n  } catch (error) {\n    console.error(error?.message);\n    return null;\n  }\n  return null;\n};\nvar ASSET_URL_PART_VALUE = \"hls\";\nvar FLV_URL_PART_VALUE = \"flv\";\nvar WEBRTC_URL_PART_VALUE = \"webrtc\";\nvar RECORDING_URL_PART_VALUE = \"recordings\";\nvar getPlaybackIdFromSourceUrl = (sourceUrl) => {\n  const parsedUrl = new URL(sourceUrl);\n  const parts = parsedUrl.pathname.split(\"/\");\n  const includesAssetUrl = parts.includes(ASSET_URL_PART_VALUE);\n  const includesWebRtcUrl = parts.includes(WEBRTC_URL_PART_VALUE);\n  const includesFlvUrl = parts.includes(FLV_URL_PART_VALUE);\n  const includesRecording = parts.includes(RECORDING_URL_PART_VALUE);\n  const playbackId = includesWebRtcUrl || includesFlvUrl ? parts?.[(parts?.length ?? 0) - 1] : includesRecording || includesAssetUrl ? parts?.[(parts?.length ?? 0) - 2] ?? null : null;\n  if (playbackId?.includes(\"+\")) {\n    const split = playbackId.split(\"+\")?.[1];\n    if (split) {\n      return split;\n    }\n  }\n  return playbackId ?? null;\n};\n\n// src/media/mime.ts\nvar getMimeType = (ending) => {\n  for (const value of Object.keys(mime)) {\n    if (mime[value]?.some((v) => v === ending)) {\n      return value;\n    }\n  }\n  return null;\n};\nvar mime = {\n  \"application/mp4\": [\"mp4s\", \"m4p\"],\n  \"application/ogg\": [\"ogx\"],\n  \"application/vnd.apple.mpegurl\": [\"m3u8\"],\n  \"audio/3gpp\": [\"*3gpp\"],\n  \"audio/adpcm\": [\"adp\"],\n  \"audio/amr\": [\"amr\"],\n  \"audio/basic\": [\"au\", \"snd\"],\n  \"audio/midi\": [\"mid\", \"midi\", \"kar\", \"rmi\"],\n  \"audio/mobile-xmf\": [\"mxmf\"],\n  \"audio/mp3\": [\"*mp3\"],\n  \"audio/mp4\": [\"m4a\", \"mp4a\"],\n  \"audio/mpeg\": [\"mpga\", \"mp2\", \"mp2a\", \"mp3\", \"m2a\", \"m3a\"],\n  \"audio/ogg\": [\"oga\", \"ogg\", \"spx\", \"opus\"],\n  \"audio/s3m\": [\"s3m\"],\n  \"audio/silk\": [\"sil\"],\n  \"audio/vnd.dece.audio\": [\"uva\", \"uvva\"],\n  \"audio/vnd.digital-winds\": [\"eol\"],\n  \"audio/vnd.dra\": [\"dra\"],\n  \"audio/vnd.dts.hd\": [\"dtshd\"],\n  \"audio/vnd.dts\": [\"dts\"],\n  \"audio/vnd.lucent.voice\": [\"lvp\"],\n  \"audio/vnd.ms-playready.media.pya\": [\"pya\"],\n  \"audio/vnd.nuera.ecelp4800\": [\"ecelp4800\"],\n  \"audio/vnd.nuera.ecelp7470\": [\"ecelp7470\"],\n  \"audio/vnd.nuera.ecelp9600\": [\"ecelp9600\"],\n  \"audio/vnd.rip\": [\"rip\"],\n  \"audio/wav\": [\"wav\"],\n  \"audio/wave\": [\"*wav\"],\n  \"audio/webm\": [\"weba\"],\n  \"audio/x-aac\": [\"aac\"],\n  \"audio/x-aiff\": [\"aif\", \"aiff\", \"aifc\"],\n  \"audio/x-caf\": [\"caf\"],\n  \"audio/x-flac\": [\"flac\"],\n  \"audio/x-m4a\": [\"*m4a\"],\n  \"audio/x-matroska\": [\"mka\"],\n  \"audio/x-mpegurl\": [\"m3u\"],\n  \"audio/x-ms-wax\": [\"wax\"],\n  \"audio/x-ms-wma\": [\"wma\"],\n  \"audio/x-pn-realaudio-plugin\": [\"rmp\"],\n  \"audio/x-pn-realaudio\": [\"ram\", \"ra\"],\n  \"audio/x-realaudio\": [\"*ra\"],\n  \"audio/x-wav\": [\"*wav\"],\n  \"audio/xm\": [\"xm\"],\n  \"video/3gpp\": [\"3gp\", \"3gpp\"],\n  \"video/3gpp2\": [\"3g2\"],\n  \"video/h261\": [\"h261\"],\n  \"video/h263\": [\"h263\"],\n  \"video/h264\": [\"h264\"],\n  \"video/iso.segment\": [\"m4s\"],\n  \"video/jpeg\": [\"jpgv\"],\n  \"video/jpm\": [\"*jpm\", \"jpgm\"],\n  \"video/mj2\": [\"mj2\", \"mjp2\"],\n  \"video/mp2t\": [\"ts\"],\n  \"video/mp4\": [\"mp4\", \"mp4v\", \"mpg4\"],\n  \"video/mpeg\": [\"mpeg\", \"mpg\", \"mpe\", \"m1v\", \"m2v\"],\n  \"video/ogg\": [\"ogv\"],\n  \"video/quicktime\": [\"qt\", \"mov\"],\n  \"video/vnd.dece.hd\": [\"uvh\", \"uvvh\"],\n  \"video/vnd.dece.mobile\": [\"uvm\", \"uvvm\"],\n  \"video/vnd.dece.pd\": [\"uvp\", \"uvvp\"],\n  \"video/vnd.dece.sd\": [\"uvs\", \"uvvs\"],\n  \"video/vnd.dece.video\": [\"uvv\", \"uvvv\"],\n  \"video/vnd.dvb.file\": [\"dvb\"],\n  \"video/vnd.fvt\": [\"fvt\"],\n  \"video/vnd.mpegurl\": [\"mxu\", \"m4u\"],\n  \"video/vnd.ms-playready.media.pyv\": [\"pyv\"],\n  \"video/vnd.uvvu.mp4\": [\"uvu\", \"uvvu\"],\n  \"video/vnd.vivo\": [\"viv\"],\n  \"video/vp8\": [\"vp8\"],\n  \"video/webm\": [\"webm\"],\n  \"video/x-f4v\": [\"f4v\"],\n  \"video/x-fli\": [\"fli\"],\n  \"video/x-flv\": [\"flv\"],\n  \"video/x-m4v\": [\"m4v\"],\n  \"video/x-matroska\": [\"mkv\", \"mk3d\", \"mks\"],\n  \"video/x-mng\": [\"mng\"],\n  \"video/x-ms-asf\": [\"asf\", \"asx\"],\n  \"video/x-ms-vob\": [\"vob\"],\n  \"video/x-ms-wm\": [\"wm\"],\n  \"video/x-ms-wmv\": [\"wmv\"],\n  \"video/x-ms-wmx\": [\"wmx\"],\n  \"video/x-ms-wvx\": [\"wvx\"],\n  \"video/x-msvideo\": [\"avi\"],\n  \"video/x-sgi-movie\": [\"movie\"],\n  \"video/x-smv\": [\"smv\"]\n};\n\n// src/media/src.ts\nvar audioExtensions = /\\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\\?)/i;\nvar base64String = /data:video/i;\nvar hlsExtensions = /\\.(m3u8)($|\\?)/i;\nvar flvExtensions = /\\/(flv)\\//i;\nvar imageExtensions = /\\.(jpg|jpeg|png|gif|bmp|webp)($|\\?)/i;\nvar vttExtensions = /\\.(vtt)($|\\?)/i;\nvar mimeFromBase64Pattern = /data:(.+?);base64/;\nvar videoExtensions = /\\.(mp4|ogv|webm|mov|m4v|avi|m3u8)($|\\?)/i;\nvar webrtcExtensions = /(webrtc|sdp)/i;\nvar getMediaSourceType = (src, opts) => {\n  if (!src) {\n    return null;\n  }\n  const sourceTest = src?.toLowerCase();\n  const base64Mime = sourceTest.match(mimeFromBase64Pattern);\n  const resolvedWidth = opts?.sizing?.width ?? null;\n  const resolvedHeight = opts?.sizing?.height ?? null;\n  return webrtcExtensions.test(sourceTest) ? {\n    type: \"webrtc\",\n    src,\n    mime: \"video/h264\",\n    width: resolvedWidth,\n    height: resolvedHeight\n  } : hlsExtensions.test(sourceTest) ? {\n    type: \"hls\",\n    src,\n    mime: getMimeType(hlsExtensions.exec(sourceTest)?.[1] ?? \"\"),\n    width: resolvedWidth,\n    height: resolvedHeight\n  } : videoExtensions.test(sourceTest) ? {\n    type: \"video\",\n    src,\n    mime: getMimeType(videoExtensions.exec(sourceTest)?.[1] ?? \"\"),\n    width: resolvedWidth,\n    height: resolvedHeight\n  } : audioExtensions.test(sourceTest) ? {\n    type: \"audio\",\n    src,\n    mime: getMimeType(audioExtensions.exec(sourceTest)?.[1] ?? \"\"),\n    width: resolvedWidth,\n    height: resolvedHeight\n  } : base64String.test(sourceTest) ? {\n    type: \"video\",\n    src,\n    mime: base64Mime ? base64Mime[1] : \"video/mp4\",\n    width: resolvedWidth,\n    height: resolvedHeight\n  } : imageExtensions.test(sourceTest) ? {\n    type: \"image\",\n    src,\n    mime: getMimeType(\n      imageExtensions.exec(sourceTest)?.[1] ?? \"\"\n    ),\n    width: resolvedWidth,\n    height: resolvedHeight\n  } : vttExtensions.test(sourceTest) ? {\n    type: \"vtt\",\n    src,\n    mime: getMimeType(\n      vttExtensions.exec(sourceTest)?.[1] ?? \"\"\n    ),\n    width: null,\n    height: null\n  } : flvExtensions.test(sourceTest) ? {\n    type: \"video\",\n    src,\n    mime: \"video/x-flv\",\n    width: resolvedWidth,\n    height: resolvedHeight\n  } : null;\n};\n\n// src/media/utils.ts\nvar DEFAULT_ASPECT_RATIO = 16 / 9;\nvar getFilteredNaN = (value) => value && !Number.isNaN(value) && Number.isFinite(value) ? value : 0;\nvar getBoundedSeek = (seek, duration) => Math.min(\n  Math.max(0, getFilteredNaN(seek)),\n  // seek to near the end\n  getFilteredNaN(duration) ? getFilteredNaN(duration) - 0.01 : 0\n);\nvar getBoundedRate = (rate) => {\n  if (typeof rate === \"number\") {\n    return Math.min(Math.max(0, getFilteredNaN(rate)), 20);\n  }\n  const match = String(rate).match(/(\\d+(\\.\\d+)?)/);\n  return match ? Math.min(Math.max(0, getFilteredNaN(Number.parseFloat(match[0]))), 20) : 1;\n};\nvar getBoundedVolume = (volume) => Math.min(Math.max(0, getFilteredNaN(volume)), 1);\nvar nanoid = (0,nanoid__WEBPACK_IMPORTED_MODULE_0__.customAlphabet)(\n  \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\",\n  22\n);\nvar generateRandomToken = () => {\n  return nanoid();\n};\nvar getClipParams = ({\n  requestedTime,\n  clipLength,\n  playbackOffsetMs\n}) => {\n  const currentTime = requestedTime ?? Date.now();\n  const estimatedServerClipTime = currentTime - (playbackOffsetMs ?? 0);\n  const startTime = estimatedServerClipTime - clipLength * 1e3;\n  const endTime = estimatedServerClipTime;\n  return {\n    startTime,\n    endTime\n  };\n};\nvar getProgressAria = ({\n  progress,\n  duration,\n  live\n}) => {\n  const progressParsed = getHoursMinutesSeconds(progress ?? null);\n  const durationParsed = getHoursMinutesSeconds(duration ?? null);\n  const progressText = `${progressParsed.hours ? `${progressParsed.hours} hours ` : \"\"}${progressParsed.minutes ? `${progressParsed.minutes} minutes ` : \"\"}${progressParsed.seconds ? `${progressParsed.seconds} seconds` : \"\"}`;\n  const durationText = `${durationParsed.hours ? `${durationParsed.hours} hours ` : \"\"}${durationParsed.minutes ? `${durationParsed.minutes} minutes ` : \"\"}${durationParsed.seconds ? `${durationParsed.seconds} seconds` : \"\"}`;\n  const progressDisplay = live ? `Live ${progressText}` : `${progressText} of ${durationText}`;\n  const formattedTimeDisplay = getFormattedHoursMinutesSeconds(\n    progress ?? null\n  );\n  const formattedDuration = getFormattedHoursMinutesSeconds(duration ?? null);\n  const formattedTime = live ? formattedTimeDisplay : `${formattedTimeDisplay} / ${formattedDuration}`;\n  return {\n    progress: progressDisplay,\n    time: formattedTime\n  };\n};\nvar sortSources = ({\n  src,\n  videoQuality,\n  screenWidth,\n  aspectRatio,\n  lowLatency,\n  hasRecentWebRTCTimeout\n}) => {\n  if (!src) {\n    return null;\n  }\n  if (typeof src === \"string\") {\n    const mediaSourceType = getMediaSourceType(src);\n    return mediaSourceType ? [mediaSourceType] : null;\n  }\n  const filteredVideoSources = src.filter(\n    (s) => s.type === \"audio\" || s.type === \"hls\" || s.type === \"webrtc\" || s.type === \"video\"\n  ).filter((s) => {\n    if (s.type === \"hls\" && lowLatency === \"force\") {\n      return false;\n    }\n    if (s.type === \"webrtc\" && (lowLatency === false || hasRecentWebRTCTimeout)) {\n      return false;\n    }\n    return true;\n  });\n  const videoQualityDimensions = calculateVideoQualityDimensions(\n    videoQuality,\n    aspectRatio\n  );\n  const targetWidth = videoQualityDimensions?.width ?? screenWidth ?? 1280;\n  const sourceWithParentDelta = filteredVideoSources?.map(\n    (s) => s.type === \"hls\" || s.type === \"webrtc\" ? { ...s, parentWidthDelta: null } : {\n      ...s,\n      parentWidthDelta: (\n        // first we check if the URL contains the video quality selector\n        videoQuality && videoQuality !== \"auto\" && s?.src?.includes(videoQuality) ? 0 : (\n          // otherwise use the width of the src\n          s?.width ? Math.abs(targetWidth - s.width) : (\n            // otherwise guess the width of the src based on the url\n            s?.src.includes(\"static360p\") || s?.src.includes(\"low-bitrate\") ? Math.abs(targetWidth - 480) : s?.src.includes(\"static720p\") ? Math.abs(targetWidth - 1280) : s?.src.includes(\"static1080p\") ? Math.abs(targetWidth - 1920) : s?.src.includes(\"static2160p\") ? Math.abs(targetWidth - 3840) : null\n          )\n        )\n      )\n    }\n  ) ?? [];\n  const sortedSources = sourceWithParentDelta.sort((a, b) => {\n    if (a.type === \"video\" && b.type === \"video\") {\n      return b?.parentWidthDelta !== null && a?.parentWidthDelta !== null ? a.parentWidthDelta - b.parentWidthDelta : 1;\n    }\n    if (a.type === \"video\" && (b.type === \"hls\" || b.type === \"webrtc\")) {\n      return -1;\n    }\n    if (a.type === \"webrtc\" && b.type === \"hls\") {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedSources;\n};\nvar parseCurrentSourceAndPlaybackId = ({\n  accessKey,\n  aspectRatio,\n  playbackRate,\n  isHlsSupported,\n  jwt,\n  sessionToken,\n  source,\n  videoQuality,\n  ingestPlayback\n}) => {\n  if (!source) {\n    return null;\n  }\n  const playbackId = getPlaybackIdFromSourceUrl(source.src);\n  const url = new URL(source.src);\n  if (sessionToken) {\n    url.searchParams.append(\"tkn\", sessionToken);\n  }\n  if (source.type !== \"webrtc\" && source.type !== \"hls\") {\n    if (jwt) {\n      url.searchParams.append(\"jwt\", jwt);\n    } else if (accessKey) {\n      url.searchParams.append(\"accessKey\", accessKey);\n    }\n  }\n  if (source.type === \"webrtc\") {\n    if (playbackRate === \"constant\") {\n      url.searchParams.append(\"constant\", \"true\");\n    }\n    const videoTrackSelector = getVideoTrackSelectorForQuality(\n      videoQuality,\n      aspectRatio\n    );\n    if (videoTrackSelector) {\n      url.searchParams.append(\"video\", videoTrackSelector);\n    }\n  }\n  if (ingestPlayback) {\n    url.searchParams.append(\"ingestpb\", String(ingestPlayback));\n  }\n  const newSrc = {\n    ...source,\n    src: url.toString()\n  };\n  const videoSourceIfHlsUnsupported = newSrc?.type === \"hls\" && !isHlsSupported ? {\n    ...newSrc,\n    type: \"video\"\n  } : newSrc;\n  return {\n    currentSource: videoSourceIfHlsUnsupported,\n    playbackId\n  };\n};\nvar getNewSource = ({\n  accessKey,\n  aspectRatio,\n  isHlsSupported,\n  jwt,\n  lowLatency,\n  playbackRate,\n  screenWidth,\n  sessionToken,\n  src,\n  videoQuality,\n  hasRecentWebRTCTimeout,\n  ingestPlayback\n}) => {\n  const sortedSources = sortSources({\n    src,\n    screenWidth,\n    videoQuality,\n    aspectRatio: aspectRatio ?? DEFAULT_ASPECT_RATIO,\n    lowLatency,\n    hasRecentWebRTCTimeout\n  });\n  const parsedSource = parseCurrentSourceAndPlaybackId({\n    accessKey: accessKey ?? null,\n    aspectRatio: aspectRatio ?? null,\n    isHlsSupported,\n    jwt: jwt ?? null,\n    playbackRate,\n    sessionToken,\n    source: sortedSources?.[0] ?? null,\n    videoQuality,\n    ingestPlayback\n  });\n  return {\n    currentSource: parsedSource?.currentSource ?? null,\n    playbackId: parsedSource?.playbackId ?? null,\n    sortedSources\n  };\n};\nvar getVideoTrackSelectorForQuality = (videoQuality, aspectRatio) => {\n  if (videoQuality === \"auto\") {\n    return null;\n  }\n  const videoQualityDimensions = calculateVideoQualityDimensions(\n    videoQuality,\n    aspectRatio\n  );\n  if (videoQualityDimensions?.width && videoQualityDimensions?.height) {\n    return `~${videoQualityDimensions.width}x${videoQualityDimensions.height}`;\n  }\n  return null;\n};\nfunction calculateVideoQualityDimensions(videoQuality, aspectRatio) {\n  const height = videoQuality === \"1080p\" ? 1080 : videoQuality === \"720p\" ? 720 : videoQuality === \"480p\" ? 480 : videoQuality === \"360p\" ? 360 : videoQuality === \"240p\" ? 240 : videoQuality === \"144p\" ? 144 : null;\n  return {\n    width: height !== null ? Math.round(height * (aspectRatio ?? 16 / 9)) : null,\n    height\n  };\n}\nvar getFormattedHoursMinutesSeconds = (valueInSeconds) => {\n  const hoursMinutesSeconds = getHoursMinutesSeconds(valueInSeconds);\n  if (hoursMinutesSeconds.seconds || hoursMinutesSeconds.minutes || hoursMinutesSeconds.hours) {\n    if (hoursMinutesSeconds.hours > 0) {\n      return `${hoursMinutesSeconds.hours}:${hoursMinutesSeconds.minutes.toString().padStart(2, \"0\")}:${hoursMinutesSeconds.seconds < 10 ? \"0\" : \"\"}${hoursMinutesSeconds.seconds}`;\n    }\n    return `${hoursMinutesSeconds.minutes}:${hoursMinutesSeconds.seconds.toString().padStart(2, \"0\")}`;\n  }\n  return \"0:00\";\n};\nvar getHoursMinutesSeconds = (valueInSeconds) => {\n  if (valueInSeconds !== void 0 && valueInSeconds !== null && !Number.isNaN(valueInSeconds) && Number.isFinite(valueInSeconds)) {\n    const roundedValue = Math.round(valueInSeconds);\n    const hours = Math.floor(roundedValue / 3600);\n    const seconds = Math.floor(roundedValue % 60);\n    if (hours > 0) {\n      const minutes2 = Math.floor(roundedValue % 3600 / 60);\n      return {\n        hours,\n        minutes: minutes2,\n        seconds\n      };\n    }\n    const minutes = Math.floor(roundedValue / 60);\n    return {\n      hours: 0,\n      minutes,\n      seconds\n    };\n  }\n  return {\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  };\n};\n\n// src/media/controller.ts\nvar DEFAULT_AUTOHIDE_TIME = 3e3;\nvar DEFAULT_SEEK_TIME = 5e3;\nvar DEFAULT_VOLUME_LEVEL = 1;\nvar webrtcTimeoutLastTime = null;\nvar getHasRecentWebRTCTimeout = (cacheWebRTCFailureMs) => {\n  if (!webrtcTimeoutLastTime || !cacheWebRTCFailureMs) return false;\n  return Date.now() - webrtcTimeoutLastTime < cacheWebRTCFailureMs;\n};\nvar createControllerStore = ({\n  device,\n  storage,\n  src,\n  initialProps,\n  playbackId\n}) => {\n  const initialPlaybackRate = initialProps?.playbackRate ?? 1;\n  const initialVolume = getBoundedVolume(\n    initialProps.volume ?? DEFAULT_VOLUME_LEVEL\n  );\n  const initialVideoQuality = initialProps.videoQuality ?? \"auto\";\n  const sessionToken = generateRandomToken();\n  const thumbnailSrc = typeof src === \"string\" ? null : src?.find?.((s) => s.type === \"image\");\n  const lowLatency = initialProps.lowLatency ?? true;\n  const parsedInputSource = getNewSource({\n    accessKey: initialProps?.accessKey,\n    aspectRatio: initialProps?.aspectRatio,\n    isHlsSupported: device.isHlsSupported,\n    jwt: initialProps?.jwt,\n    playbackRate: initialPlaybackRate,\n    lowLatency,\n    screenWidth: device.screenWidth,\n    sessionToken,\n    src,\n    videoQuality: initialVideoQuality,\n    hasRecentWebRTCTimeout: getHasRecentWebRTCTimeout(\n      initialProps.cacheWebRTCFailureMs\n    ),\n    ingestPlayback: initialProps.ingestPlayback ?? false\n  });\n  const initialControls = {\n    hlsConfig: null,\n    autohide: DEFAULT_AUTOHIDE_TIME,\n    lastError: 0,\n    lastInteraction: Date.now(),\n    requestedMeasureLastTime: 0,\n    muted: initialVolume === 0,\n    playbackId: playbackId ?? parsedInputSource?.playbackId ?? null,\n    playbackOffsetMs: null,\n    playLastTime: 0,\n    pauseLastTime: 0,\n    requestedClipParams: null,\n    requestedFullscreenLastTime: 0,\n    requestedPictureInPictureLastTime: 0,\n    requestedPlayPauseLastTime: 0,\n    requestedRangeToSeekTo: 0,\n    sessionToken,\n    size: null,\n    thumbnail: thumbnailSrc ?? null,\n    volume: initialVolume\n  };\n  const store = (0,zustand_vanilla__WEBPACK_IMPORTED_MODULE_1__.createStore)(\n    (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_2__.subscribeWithSelector)(\n      (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_2__.persist)(\n        (set, get) => ({\n          currentSource: parsedInputSource.currentSource,\n          canPlay: false,\n          hidden: false,\n          /** Current volume of the media. 0 if it is muted. */\n          volume: initialVolume,\n          /** The playback rate for the media. Defaults to 1. */\n          playbackRate: initialPlaybackRate,\n          videoQuality: \"auto\",\n          /** Current progress of the media (in seconds) */\n          progress: 0,\n          /** Current total duration of the media (in seconds) */\n          duration: 0,\n          /** Current buffered end time for the media (in seconds) */\n          buffered: 0,\n          /** Current buffered percent */\n          bufferedPercent: 0,\n          poster: thumbnailSrc?.src ?? null,\n          /** If the video element is mounted on the DOM */\n          mounted: false,\n          /** If the media is fullscreen. */\n          fullscreen: false,\n          /** If the media is in picture in picture mode */\n          pictureInPicture: false,\n          playing: false,\n          waiting: false,\n          stalled: false,\n          loading: true,\n          ended: false,\n          /** If the media has experienced an error. */\n          error: null,\n          errorCount: 0,\n          /** If the content is live media */\n          live: false,\n          /** If the media has been played yet. */\n          hasPlayed: false,\n          /** The sorted sources that were passed in to the Player */\n          sortedSources: parsedInputSource.sortedSources,\n          /** The final playback URL for the media that is playing, after redirects. */\n          currentUrl: null,\n          metricsReportingUrl: null,\n          aria: {\n            progress: \"No progress, content is loading\",\n            fullscreen: \"Full screen (f)\",\n            pictureInPicture: \"Mini player (i)\",\n            playPause: \"Play (k)\",\n            clip: initialProps.clipLength ? `Clip last ${Number(initialProps.clipLength).toFixed(\n              0\n            )} seconds (x)` : null,\n            time: \"0:00\"\n          },\n          __initialProps: {\n            accessKey: initialProps.accessKey ?? null,\n            aspectRatio: initialProps?.aspectRatio ?? null,\n            autoPlay: initialProps.autoPlay ?? false,\n            backoff: Math.max(initialProps.backoff ?? 500, 100),\n            backoffMax: Math.max(initialProps.backoffMax ?? 3e4, 1e4),\n            calculateDelay: initialProps.calculateDelay ?? ((count) => {\n              if (count === 0) {\n                return 0;\n              }\n              const delayTime = Math.min(\n                Math.max(initialProps.backoff ?? 500, 100) * 2 ** (count - 1),\n                Math.max(initialProps.backoffMax ?? 3e4, 1e4)\n              );\n              return delayTime;\n            }),\n            clipLength: initialProps.clipLength ?? null,\n            cacheWebRTCFailureMs: initialProps.cacheWebRTCFailureMs ?? null,\n            hotkeys: initialProps?.hotkeys ?? true,\n            jwt: initialProps.jwt ?? null,\n            lowLatency,\n            onError: initialProps?.onError ?? null,\n            playbackRate: initialPlaybackRate,\n            posterLiveUpdate: initialProps.posterLiveUpdate ?? 3e4,\n            preload: initialProps.preload ?? \"none\",\n            storage,\n            timeout: initialProps.timeout ?? 1e4,\n            videoQuality: initialVideoQuality,\n            viewerId: initialProps.viewerId ?? null,\n            volume: initialVolume ?? null,\n            ingestPlayback: initialProps.ingestPlayback ?? false,\n            iceServers: initialProps.iceServers\n          },\n          __device: device,\n          __controls: initialControls,\n          __metadata: null,\n          __controlsFunctions: {\n            setMounted: () => set(() => ({\n              mounted: true\n            })),\n            setPoster: (poster) => set(() => ({\n              poster\n            })),\n            setMetricsReportingUrl: (metricsReportingUrl) => set(() => ({\n              metricsReportingUrl\n            })),\n            onWebRTCTimeout: () => {\n              webrtcTimeoutLastTime = Date.now();\n            },\n            setAutohide: (autohide) => set(({ __controls }) => ({\n              __controls: {\n                ...__controls,\n                autohide\n              }\n            })),\n            setHlsConfig: (hlsConfig) => set(({ __controls }) => ({\n              __controls: {\n                ...__controls,\n                hlsConfig\n              }\n            })),\n            setHidden: (hidden) => set(({ playing }) => ({\n              hidden: playing ? hidden : false\n            })),\n            updateLastInteraction: () => set(({ __controls }) => ({\n              __controls: { ...__controls, lastInteraction: Date.now() }\n            })),\n            updatePlaybackOffsetMs: (offset) => set(({ __controls }) => ({\n              __controls: {\n                ...__controls,\n                playbackOffsetMs: offset\n              }\n            })),\n            onCanPlay: () => set(() => ({\n              canPlay: true,\n              loading: false\n            })),\n            onPlay: () => set(({ aria, __controls, __controlsFunctions }) => {\n              __controlsFunctions.onError(null);\n              const title = \"Pause (k)\";\n              return {\n                playing: true,\n                hasPlayed: true,\n                error: null,\n                errorCount: 0,\n                stalled: false,\n                waiting: false,\n                ended: false,\n                __controls: {\n                  ...__controls,\n                  playLastTime: Date.now()\n                },\n                aria: {\n                  ...aria,\n                  playPause: title\n                }\n              };\n            }),\n            onPause: () => set(({ aria, __controls }) => {\n              const title = \"Play (k)\";\n              return {\n                playing: false,\n                hidden: false,\n                stalled: false,\n                waiting: false,\n                ended: false,\n                aria: {\n                  ...aria,\n                  playPause: title\n                },\n                __controls: {\n                  ...__controls,\n                  pauseLastTime: Date.now()\n                }\n              };\n            }),\n            togglePlay: (force) => {\n              const { hidden, __device, __controlsFunctions } = store.getState();\n              if (!force && hidden && __device.isMobile) {\n                __controlsFunctions.setHidden(false);\n              } else {\n                set(({ __controls }) => ({\n                  __controls: {\n                    ...__controls,\n                    requestedPlayPauseLastTime: Date.now(),\n                    lastInteraction: Date.now()\n                  }\n                }));\n              }\n            },\n            onProgress: (time) => set(({ aria, progress, duration, live }) => {\n              const progressAria = getProgressAria({\n                progress,\n                duration,\n                live\n              });\n              const playPauseTitle = \"Pause (k)\";\n              return {\n                aria: {\n                  ...aria,\n                  progress: progressAria.progress,\n                  time: progressAria.time,\n                  playPause: playPauseTitle\n                },\n                progress: getFilteredNaN(time),\n                waiting: false,\n                stalled: false,\n                ended: false\n              };\n            }),\n            requestSeek: (time) => set(({ duration, __controls }) => ({\n              __controls: {\n                ...__controls,\n                requestedRangeToSeekTo: getBoundedSeek(time, duration)\n              },\n              progress: getBoundedSeek(time, duration)\n            })),\n            onDurationChange: (duration) => set(({ live }) => ({\n              duration,\n              live: duration === Number.POSITIVE_INFINITY ? true : live\n            })),\n            setWebsocketMetadata: (metadata) => set(() => ({ __metadata: metadata })),\n            updateBuffered: (buffered) => set(({ duration }) => {\n              const durationFiltered = getFilteredNaN(duration);\n              const percent = durationFiltered > 0 && buffered > 0 ? buffered / durationFiltered * 100 : 0;\n              return {\n                buffered,\n                bufferedPercent: Number(percent.toFixed(2))\n              };\n            }),\n            setVideoQuality: (videoQuality) => set(({ __initialProps, __controls, playbackRate, __device }) => {\n              const parsedSourceNew = getNewSource({\n                accessKey: __initialProps?.accessKey,\n                aspectRatio: __initialProps.aspectRatio,\n                isHlsSupported: __device.isHlsSupported,\n                jwt: __initialProps?.jwt,\n                lowLatency: __initialProps.lowLatency,\n                playbackRate,\n                screenWidth: device.screenWidth,\n                sessionToken: __controls.sessionToken,\n                src,\n                videoQuality,\n                hasRecentWebRTCTimeout: getHasRecentWebRTCTimeout(\n                  __initialProps.cacheWebRTCFailureMs\n                ),\n                ingestPlayback: __initialProps.ingestPlayback\n              });\n              return {\n                sortedSources: parsedSourceNew.sortedSources,\n                videoQuality,\n                currentSource: parsedSourceNew.currentSource,\n                __controls: {\n                  ...__controls,\n                  playbackId: playbackId ?? parsedSourceNew.playbackId\n                }\n              };\n            }),\n            setPlaybackRate: (rate) => set(() => ({\n              playbackRate: getBoundedRate(rate ?? 1)\n            })),\n            requestSeekDiff: (difference) => set(({ progress, duration, __controls }) => ({\n              __controls: {\n                ...__controls,\n                requestedRangeToSeekTo: getBoundedSeek(\n                  getFilteredNaN(progress) + difference / 1e3,\n                  duration\n                )\n              }\n            })),\n            requestSeekBack: (difference = DEFAULT_SEEK_TIME) => get().__controlsFunctions.requestSeekDiff(-difference),\n            requestSeekForward: (difference = DEFAULT_SEEK_TIME) => get().__controlsFunctions.requestSeekDiff(difference),\n            onFinalUrl: (currentUrl) => set(() => ({ currentUrl })),\n            requestMeasure: () => set(({ __controls }) => {\n              return {\n                __controls: {\n                  ...__controls,\n                  requestedMeasureLastTime: Date.now()\n                }\n              };\n            }),\n            setSize: (size) => set(({ __controls }) => {\n              return {\n                __controls: {\n                  ...__controls,\n                  size: {\n                    ...__controls.size,\n                    ...size\n                  }\n                }\n              };\n            }),\n            onWaiting: () => set(() => ({ waiting: true })),\n            onStalled: () => set(() => ({ stalled: true })),\n            onLoading: () => set(() => ({ loading: true })),\n            onEnded: () => set(() => ({ ended: true })),\n            setFullscreen: (fullscreen) => set(({ aria }) => {\n              const title = fullscreen ? \"Exit full screen (f)\" : \"Full screen (f)\";\n              return {\n                fullscreen,\n                aria: {\n                  ...aria,\n                  fullscreen: title\n                }\n              };\n            }),\n            requestToggleFullscreen: () => set(({ __controls }) => ({\n              __controls: {\n                ...__controls,\n                requestedFullscreenLastTime: Date.now()\n              }\n            })),\n            setPictureInPicture: (pictureInPicture) => set(({ aria }) => {\n              const title = pictureInPicture ? \"Exit mini player (i)\" : \"Mini player (i)\";\n              return {\n                pictureInPicture,\n                aria: {\n                  ...aria,\n                  pictureInPicture: title\n                }\n              };\n            }),\n            requestTogglePictureInPicture: () => set(({ __controls }) => ({\n              __controls: {\n                ...__controls,\n                requestedPictureInPictureLastTime: Date.now()\n              }\n            })),\n            setLive: (live) => set(() => ({ live })),\n            requestClip: () => set(({ __controls, __initialProps }) => ({\n              __controls: {\n                ...__controls,\n                requestedClipParams: __initialProps.clipLength ? getClipParams({\n                  requestedTime: Date.now(),\n                  clipLength: __initialProps.clipLength,\n                  playbackOffsetMs: __controls.playbackOffsetMs\n                }) : null\n              }\n            })),\n            requestVolume: (newVolume) => set(({ __controls }) => ({\n              volume: getBoundedVolume(newVolume),\n              __controls: {\n                ...__controls,\n                volume: newVolume === 0 ? newVolume : getBoundedVolume(newVolume),\n                muted: newVolume === 0\n              }\n            })),\n            setVolume: (newVolume) => set(({ __controls }) => ({\n              volume: getBoundedVolume(newVolume),\n              __controls: {\n                ...__controls,\n                muted: newVolume === 0\n              }\n            })),\n            requestToggleMute: (forceValue) => set(({ __controls }) => {\n              const previousVolume = getBoundedVolume(__controls.volume) || 0;\n              const nonMutedVolume = previousVolume > 0.01 ? previousVolume : DEFAULT_VOLUME_LEVEL;\n              const mutedVolume = 0;\n              const newMutedValue = forceValue ?? !__controls.muted;\n              return {\n                volume: newMutedValue ? mutedVolume : nonMutedVolume,\n                __controls: {\n                  ...__controls,\n                  muted: newMutedValue\n                }\n              };\n            }),\n            onError: (rawError) => set(\n              ({\n                currentSource,\n                sortedSources,\n                __controls,\n                errorCount,\n                __device,\n                __initialProps,\n                videoQuality,\n                playbackRate\n              }) => {\n                const msSinceLastError = Date.now() - __controls.lastError;\n                const error = rawError ? {\n                  type: isAccessControlError(rawError) ? \"access-control\" : isBframesError(rawError) || isNotAcceptableError(rawError) ? \"fallback\" : isStreamOfflineError(rawError) ? \"offline\" : isPermissionsError(rawError) ? \"permissions\" : \"unknown\",\n                  message: rawError?.message ?? \"Error with playback.\"\n                } : null;\n                if (__initialProps.onError) {\n                  try {\n                    __initialProps.onError(error);\n                  } catch (e) {\n                    console.error(e);\n                  }\n                }\n                const base = {\n                  error,\n                  ...error ? {\n                    errorCount: errorCount + 1,\n                    playing: false,\n                    __controls: {\n                      ...__controls,\n                      lastError: Date.now()\n                    }\n                  } : { __controls }\n                };\n                if (!error) {\n                  return base;\n                }\n                console.error(error);\n                if (error.type === \"offline\" || error.type === \"access-control\" || error.type === \"permissions\") {\n                  return base;\n                }\n                if (typeof sortedSources === \"string\" || !Array.isArray(sortedSources)) {\n                  return base;\n                }\n                if (msSinceLastError < errorCount * 500) {\n                  return base;\n                }\n                const currentSourceBaseUrl = currentSource ? new URL(currentSource.src) : \"\";\n                if (currentSourceBaseUrl) {\n                  currentSourceBaseUrl.search = \"\";\n                }\n                const currentSourceIndex = sortedSources.findIndex(\n                  (s) => s.src === currentSourceBaseUrl.toString()\n                );\n                const rotatedSources = [\n                  ...sortedSources.slice(currentSourceIndex + 1),\n                  ...sortedSources.slice(0, currentSourceIndex + 1)\n                ];\n                const hasRecentWebRTCTimeout = getHasRecentWebRTCTimeout(\n                  __initialProps.cacheWebRTCFailureMs\n                );\n                const canPlaySourceType = (src2) => {\n                  const hasOneWebRTCSource = sortedSources.some(\n                    (s) => s?.type === \"webrtc\"\n                  );\n                  if (__initialProps.lowLatency === \"force\" && hasOneWebRTCSource && src2.type !== \"webrtc\") {\n                    return false;\n                  }\n                  if (__initialProps.lowLatency === false) {\n                    return src2.type !== \"webrtc\";\n                  }\n                  if (hasRecentWebRTCTimeout) {\n                    return src2.type !== \"webrtc\";\n                  }\n                  return src2.type === \"webrtc\" ? __device.isWebRTCSupported : true;\n                };\n                const nextPlayableIndex = rotatedSources.findIndex(\n                  (s) => canPlaySourceType(s)\n                );\n                const nextSourceIndex = nextPlayableIndex !== -1 ? (currentSourceIndex + 1 + nextPlayableIndex) % sortedSources.length : -1;\n                const nextSource = nextSourceIndex !== -1 ? sortedSources[nextSourceIndex] : null;\n                const parsedSourceNew = parseCurrentSourceAndPlaybackId({\n                  accessKey: __initialProps?.accessKey ?? null,\n                  aspectRatio: __initialProps?.aspectRatio ?? null,\n                  isHlsSupported: __device.isHlsSupported,\n                  jwt: __initialProps?.jwt ?? null,\n                  playbackRate,\n                  sessionToken: __controls.sessionToken,\n                  source: nextSource,\n                  videoQuality,\n                  ingestPlayback: __initialProps.ingestPlayback\n                });\n                return {\n                  ...base,\n                  currentSource: parsedSourceNew?.currentSource ?? null,\n                  __controls: {\n                    ...base.__controls,\n                    playbackId: playbackId ?? parsedSourceNew?.playbackId ?? null\n                  }\n                };\n              }\n            )\n          }\n        }),\n        {\n          name: \"livepeer-media-controller\",\n          version: 2,\n          // since these values are persisted across media, only persist volume & videoQuality\n          partialize: ({ volume, videoQuality }) => ({\n            volume,\n            videoQuality\n          }),\n          storage: (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_2__.createJSONStorage)(() => storage)\n        }\n      )\n    )\n  );\n  const destroy = store.persist.onFinishHydration(\n    ({ videoQuality, volume }) => {\n      if (videoQuality !== store.getState().videoQuality) {\n        store.getState().__controlsFunctions.setVideoQuality(videoQuality);\n      }\n      if (volume !== store.getState().volume) {\n        store.getState().__controlsFunctions.requestVolume(volume);\n      }\n    }\n  );\n  return { store, destroy };\n};\n\n// src/media/metrics.ts\nvar LegacyPlaybackMonitor = class {\n  active = false;\n  values = [];\n  score = null;\n  averagingSteps = 20;\n  store;\n  constructor(store) {\n    this.store = store;\n  }\n  init() {\n    if (!this.active) {\n      this.values = [];\n      this.score = null;\n      this.active = true;\n    }\n  }\n  reset() {\n    if (!this.active) {\n      this.init();\n    } else {\n      this.values = [];\n    }\n  }\n  destroy() {\n    if (this.active) {\n      this.values = [];\n      this.score = null;\n      this.active = false;\n    }\n  }\n  calculateScore() {\n    if (this.active) {\n      const latestPlaybackRecord = this.values.length > 0 ? this.values[this.values.length - 1] : void 0;\n      const currentValue = {\n        clockTime: Date.now() * 1e-3,\n        mediaTime: this.store.getState().progress,\n        score: latestPlaybackRecord ? this.valueToScore(latestPlaybackRecord) : 0\n      };\n      this.values.push(currentValue);\n      if (this.values.length < 2) {\n        return null;\n      }\n      const oldestValue = this.values[0];\n      if (oldestValue !== void 0) {\n        const averagedScore = this.valueToScore(oldestValue, currentValue);\n        if (this.values.length > this.averagingSteps) {\n          this.values.shift();\n        }\n        this.score = Math.max(averagedScore, currentValue.score);\n        return Math.round(this.score * 10) / 10;\n      }\n    }\n    return null;\n  }\n  valueToScore(a, b) {\n    const rate = this?.store?.getState?.()?.playbackRate ?? 1;\n    return (b?.mediaTime ?? this.store.getState().progress - a.mediaTime) / (b?.clockTime ?? Date.now() * 1e-3 - a.clockTime) / (rate === \"constant\" ? 1 : rate);\n  }\n};\nvar Timer = class {\n  totalTime = 0;\n  countStarts = 0;\n  startTime = 0;\n  start() {\n    this.startTime = Date.now();\n    this.countStarts++;\n  }\n  stop() {\n    this.totalTime += this.startTime > 0 ? Date.now() - this.startTime : 0;\n    this.startTime = 0;\n  }\n  getTotalTime() {\n    this.totalTime += this.startTime > 0 ? Date.now() - this.startTime : 0;\n    this.startTime = this.startTime > 0 ? Date.now() : 0;\n    return this.totalTime;\n  }\n  getCountStarts() {\n    return this.countStarts;\n  }\n};\nfunction isInIframe() {\n  try {\n    return typeof window !== \"undefined\" && window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\nvar LegacyMetricsStatus = class {\n  requestedPlayTime = null;\n  firstFrameTime = null;\n  bootMs;\n  retryCount = 0;\n  connected = false;\n  store;\n  destroy;\n  currentMetrics;\n  previousMetrics = null;\n  timeWaiting = new Timer();\n  timeStalled = new Timer();\n  timeUnpaused = new Timer();\n  constructor(store, bootMs, opts) {\n    const currentState = store.getState();\n    this.store = store;\n    this.bootMs = bootMs;\n    const windowHref = typeof window !== \"undefined\" ? window?.location?.href ?? \"\" : \"\";\n    const pageUrl = isInIframe() ? typeof document !== \"undefined\" ? document?.referrer || windowHref : windowHref : windowHref;\n    const playerPrefix = currentState?.currentSource?.type ?? \"unknown\";\n    const version = currentState?.__device.version ?? \"unknown\";\n    this.currentMetrics = {\n      autoplay: currentState.__initialProps.autoPlay ? \"autoplay\" : currentState.__initialProps.preload === \"auto\" ? \"preload-full\" : currentState.__initialProps.preload === \"metadata\" ? \"preload-metadata\" : \"standard\",\n      duration: null,\n      firstPlayback: null,\n      nError: null,\n      nStalled: null,\n      nWaiting: null,\n      offset: null,\n      pageUrl,\n      playbackScore: null,\n      player: `${playerPrefix}-${version}`,\n      sourceType: currentState?.currentSource?.mime ?? \"unknown\",\n      sourceUrl: currentState?.currentSource?.src ?? null,\n      playerHeight: null,\n      playerWidth: null,\n      preloadTime: null,\n      timeStalled: 0,\n      timeUnpaused: 0,\n      timeWaiting: 0,\n      ttff: null,\n      uid: currentState.__initialProps.viewerId ?? \"\",\n      userAgent: String(currentState?.__device?.userAgent ?? \"\").replace(\n        /\\\\|\"/gm,\n        \"\"\n      ),\n      videoHeight: null,\n      videoWidth: null\n    };\n    this.destroy = store.subscribe((state, prevState) => {\n      if (this.requestedPlayTime === null && state.__controls.playLastTime !== 0) {\n        this.requestedPlayTime = Math.max(\n          state.__controls.playLastTime - bootMs,\n          0\n        );\n      }\n      if (state.currentSource?.src !== prevState.currentSource?.src) {\n        const playerPrefix2 = state?.currentSource?.type ?? \"unknown\";\n        const version2 = state?.__device.version ?? \"unknown\";\n        this.currentMetrics.player = `${playerPrefix2}-${version2}`;\n        this.currentMetrics.sourceType = state.currentSource?.mime ?? \"unknown\";\n        this.currentMetrics.sourceUrl = state.currentSource?.src ?? null;\n      }\n      if (state.playing !== prevState.playing) {\n        if (state.playing) {\n          this.timeStalled.stop();\n          this.timeWaiting.stop();\n          this.timeUnpaused.start();\n        } else {\n          this.timeUnpaused.stop();\n          this.timeStalled.stop();\n          this.timeWaiting.stop();\n        }\n      }\n      if (opts?.disableProgressListener !== true && state.progress !== prevState.progress && !this.timeUnpaused.startTime) {\n        this.timeStalled.stop();\n        this.timeWaiting.stop();\n        this.timeUnpaused.start();\n      }\n      if (state.stalled !== prevState.stalled) {\n        if (state.stalled) {\n          this.timeStalled.start();\n          this.timeUnpaused.stop();\n        } else if (state.playing) {\n          this.timeStalled.stop();\n          this.timeWaiting.stop();\n          this.timeUnpaused.start();\n        }\n      }\n      if (state.waiting !== prevState.waiting) {\n        if (state.waiting) {\n          this.timeWaiting.start();\n          this.timeUnpaused.stop();\n        } else if (state.playing) {\n          this.timeStalled.stop();\n          this.timeWaiting.stop();\n          this.timeUnpaused.start();\n        }\n      }\n    });\n  }\n  addError(error) {\n    this.currentMetrics.nError = (this.currentMetrics.nError ?? 0) + 1;\n    this.currentMetrics.lastError = error;\n  }\n  getFirstPlayback() {\n    return this.currentMetrics.firstPlayback;\n  }\n  setFirstPlayback() {\n    this.currentMetrics.firstPlayback = Date.now() - this.bootMs;\n  }\n  getFirstFrameTime() {\n    return this.firstFrameTime;\n  }\n  setFirstFrameTime() {\n    this.firstFrameTime = Date.now() - this.bootMs;\n  }\n  setPlaybackScore(playbackScore) {\n    this.currentMetrics.playbackScore = playbackScore;\n  }\n  setConnected(isConnected) {\n    this.connected = isConnected;\n  }\n  getMetrics() {\n    const currentMetrics = {\n      ...this.currentMetrics,\n      playerHeight: this.store.getState().__controls.size?.container?.height || null,\n      playerWidth: this.store.getState().__controls.size?.container?.width || null,\n      videoWidth: this.store.getState().__controls.size?.media?.width || null,\n      videoHeight: this.store.getState().__controls.size?.media?.height || null,\n      duration: this.store.getState().duration || null,\n      nWaiting: this.timeWaiting.getCountStarts(),\n      nStalled: this.timeStalled.getCountStarts(),\n      timeWaiting: this.timeWaiting.getTotalTime(),\n      timeStalled: this.timeStalled.getTotalTime(),\n      timeUnpaused: this.timeUnpaused.getTotalTime(),\n      offset: this.store.getState().__controls.playbackOffsetMs || null,\n      // this is the amount of time that a video has had to preload content, from boot until play was requested\n      preloadTime: this.requestedPlayTime,\n      // time from when the first `play` event is emitted and the first progress update\n      ttff: this.firstFrameTime && this.requestedPlayTime && this.firstFrameTime > 0 && this.requestedPlayTime > 0 ? Math.max(this.firstFrameTime - this.requestedPlayTime, 0) : null\n    };\n    const previousMetrics = this.previousMetrics;\n    this.previousMetrics = currentMetrics;\n    return {\n      current: currentMetrics,\n      previous: previousMetrics\n    };\n  }\n};\nfunction addLegacyMediaMetricsToStore(store, opts) {\n  const bootMs = Date.now();\n  const defaultResponse = {\n    metrics: null,\n    destroy: () => {\n    }\n  };\n  if (!store) {\n    return defaultResponse;\n  }\n  if (!WebSocket) {\n    console.log(\"Environment does not support WebSocket\");\n    return defaultResponse;\n  }\n  let websocketPromise = null;\n  let timer = null;\n  let reportingActive = true;\n  const metricsStatus = new LegacyMetricsStatus(store, bootMs, opts);\n  const monitor = new LegacyPlaybackMonitor(store);\n  const report = async () => {\n    const ws = await websocketPromise;\n    if (!reportingActive || !ws) {\n      return;\n    }\n    const playbackScore = monitor.calculateScore();\n    if (playbackScore !== null) {\n      metricsStatus.setPlaybackScore(playbackScore);\n    }\n    const metrics = metricsStatus.getMetrics();\n    const d = {};\n    let key;\n    for (key in metrics.current) {\n      const val = metrics.current[key];\n      const shouldSendValue = typeof val === \"number\" ? Number.isFinite(val) && !Number.isNaN(val) && val >= 0 : Boolean(val);\n      if (shouldSendValue && val !== metrics?.previous?.[key]) {\n        d[key] = val;\n      }\n    }\n    if (Object.keys(d).length > 0) {\n      send(ws, d);\n    }\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      report();\n    }, 1e3);\n  };\n  const createNewWebSocket = async (playbackId, currentSource, numRetries = 0) => {\n    try {\n      if (!playbackId || !currentSource) {\n        return null;\n      }\n      const prevWebsocket = await websocketPromise;\n      prevWebsocket?.close?.(3077);\n      const reportingWebsocketUrl = await getMetricsReportingWebsocketUrl({\n        playbackId,\n        playbackUrl: currentSource,\n        sessionToken: store.getState().__controls.sessionToken\n      });\n      if (reportingWebsocketUrl) {\n        const newWebSocket = new WebSocket(reportingWebsocketUrl);\n        newWebSocket.addEventListener(\"open\", async () => {\n          report();\n        });\n        newWebSocket.addEventListener(\"message\", (event) => {\n          try {\n            if (event?.data) {\n              const json = JSON.parse(event.data);\n              store.getState().__controlsFunctions.setWebsocketMetadata(json);\n            }\n          } catch (e) {\n            console.warn(\"Failed to parse metadata from websocket.\");\n          }\n        });\n        newWebSocket.addEventListener(\"close\", () => {\n          if (timer) {\n            clearTimeout(timer);\n          }\n          setTimeout(\n            () => {\n              if (reportingActive) {\n                websocketPromise = createNewWebSocket(\n                  playbackId,\n                  currentSource,\n                  numRetries + 1\n                );\n              }\n            },\n            2 ** numRetries * 1e3\n          );\n        });\n        return newWebSocket;\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return null;\n  };\n  const destroyMetricsListener = store.subscribe(\n    (state) => ({\n      playbackId: state.__controls.playbackId,\n      finalUrl: state.currentUrl,\n      type: state.currentSource?.type\n    }),\n    (state) => {\n      if (state?.playbackId && state?.finalUrl) {\n        websocketPromise = createNewWebSocket(state.playbackId, state.finalUrl);\n      }\n    },\n    {\n      fireImmediately: true,\n      equalityFn: (a, b) => {\n        return a.playbackId === b.playbackId && Boolean(a.finalUrl);\n      }\n    }\n  );\n  try {\n    const destroyTtffListener = store.subscribe((state, prevState) => {\n      if (state.playing !== prevState.playing && metricsStatus.getFirstPlayback() === null) {\n        metricsStatus.setFirstPlayback();\n      }\n      if (state.progress !== prevState.progress && metricsStatus.getFirstFrameTime() === null) {\n        metricsStatus.setFirstFrameTime();\n      }\n      if (state.error?.message && state.error?.message !== prevState.error?.message) {\n        metricsStatus.addError(state.error.message);\n      }\n    });\n    const destroyMonitorListener = store.subscribe((state, prevState) => {\n      if (state.playing !== prevState.playing && state.playing || state.loading !== prevState.loading && state.loading) {\n        monitor.init();\n      }\n      if (state.__controls.requestedRangeToSeekTo !== prevState.__controls.requestedRangeToSeekTo) {\n        monitor.reset();\n      }\n      if (state.playing !== prevState.playing && !state.playing) {\n        monitor.destroy();\n      }\n    });\n    const destroy = () => {\n      reportingActive = false;\n      destroyMetricsListener?.();\n      destroyMonitorListener?.();\n      destroyTtffListener?.();\n      monitor?.destroy?.();\n      metricsStatus?.destroy?.();\n      if (timer) {\n        clearTimeout(timer);\n      }\n      if (websocketPromise) {\n        websocketPromise.then((websocket) => {\n          websocket?.close(3077);\n        });\n      }\n    };\n    return { metrics: metricsStatus, destroy };\n  } catch (e) {\n    console.error(e);\n  }\n  return defaultResponse;\n}\nfunction send(webSocket, metrics) {\n  if (webSocket.readyState !== webSocket.OPEN) {\n    return;\n  }\n  webSocket.send(JSON.stringify(metrics));\n}\n\n// src/utils/deepMerge.ts\nvar isObject = (obj) => {\n  if (typeof obj === \"object\" && obj !== null) {\n    if (typeof Object.getPrototypeOf === \"function\") {\n      const prototype = Object.getPrototypeOf(obj);\n      return prototype === Object.prototype || prototype === null;\n    }\n    return Object.prototype.toString.call(obj) === \"[object Object]\";\n  }\n  return false;\n};\nvar merge = (...objects) => objects.reduce((result, current) => {\n  if (Array.isArray(current)) {\n    throw new TypeError(\n      \"Arguments provided to ts-deepmerge must be objects, not arrays.\"\n    );\n  }\n  Object.keys(current).forEach((key) => {\n    if ([\"__proto__\", \"constructor\", \"prototype\"].includes(key)) {\n      return;\n    }\n    if (Array.isArray(result[key]) && Array.isArray(current[key])) {\n      result[key] = merge.options.mergeArrays ? Array.from(new Set(result[key].concat(current[key]))) : current[key];\n    } else if (isObject(result[key]) && isObject(current[key])) {\n      result[key] = merge(result[key], current[key]);\n    } else {\n      result[key] = current[key];\n    }\n  });\n  return result;\n}, {});\nvar defaultOptions = {\n  mergeArrays: true\n};\nmerge.options = defaultOptions;\nmerge.withOptions = (options, ...objects) => {\n  merge.options = {\n    mergeArrays: true,\n    ...options\n  };\n  const result = merge(...objects);\n  merge.options = defaultOptions;\n  return result;\n};\n\n// src/utils/storage/ipfs.ts\n\n\n// src/utils/warn.ts\nvar cache = /* @__PURE__ */ new Set();\nfunction warn(message, id) {\n  if (!cache.has(id ?? message)) {\n    console.warn(message);\n    cache.add(message);\n  }\n}\n\n// src/media/metrics-new.ts\nvar globalLoadTimestampMs = Date.now();\nfunction addMetricsToStore(store, opts) {\n  const defaultResponse = {\n    destroy: () => {\n    }\n  };\n  if (!store) {\n    return defaultResponse;\n  }\n  if (typeof window === \"undefined\") {\n    return defaultResponse;\n  }\n  const monitor = new MetricsMonitor(store, {\n    disableProgressListener: opts?.disableProgressListener\n  });\n  const isSendBeaconAvailable = \"sendBeacon\" in window.navigator;\n  const interval = opts?.interval ?? 5e3;\n  const eventBuffer = new PlaybackEventBuffer();\n  const destroyFinalUrlListener = store.subscribe(\n    (state) => ({\n      finalUrl: state.currentUrl\n    }),\n    async (state) => {\n      if (state?.finalUrl) {\n        const url = await getMetricsReportingPOSTUrl({\n          playbackUrl: state.finalUrl\n        });\n        if (url) {\n          store.getState().__controlsFunctions.setMetricsReportingUrl(url);\n        }\n      }\n    },\n    {\n      fireImmediately: true,\n      equalityFn: (a, b) => {\n        return a.finalUrl === b.finalUrl;\n      }\n    }\n  );\n  const destroyErrorListener = store.subscribe(\n    (state) => state.error,\n    async (error) => {\n      if (error) {\n        eventBuffer.addEvent(\n          error.type === \"offline\" || error.type === \"fallback\" ? {\n            id: generateRandomToken(),\n            type: \"warning\",\n            timestamp: Date.now(),\n            category: error.type,\n            message: error.message\n          } : {\n            id: generateRandomToken(),\n            type: \"error\",\n            timestamp: Date.now(),\n            category: error.type,\n            message: error.message\n          }\n        );\n      }\n    }\n  );\n  const destroyPlayListener = store.subscribe(\n    (state) => state.__controls.playLastTime,\n    async (timestamp) => {\n      eventBuffer.addEvent({\n        id: generateRandomToken(),\n        type: \"play\",\n        timestamp\n      });\n    }\n  );\n  const destroyPauseListener = store.subscribe(\n    (state) => state.__controls.pauseLastTime,\n    async (timestamp) => {\n      eventBuffer.addEvent({\n        id: generateRandomToken(),\n        type: \"pause\",\n        timestamp\n      });\n    }\n  );\n  const destroyClipListener = store.subscribe(\n    (state) => state.__controls.requestedClipParams,\n    async (params) => {\n      if (params) {\n        eventBuffer.addEvent({\n          id: generateRandomToken(),\n          type: \"clip\",\n          timestamp: Date.now(),\n          startTime: params.startTime,\n          endTime: params.endTime\n        });\n      }\n    }\n  );\n  const destroyPipListener = store.subscribe(\n    (state) => state.pictureInPicture,\n    async (pictureInPicture) => {\n      eventBuffer.addEvent({\n        id: generateRandomToken(),\n        type: pictureInPicture ? \"enter-pip\" : \"exit-pip\",\n        timestamp: Date.now()\n      });\n    }\n  );\n  const destroyFullscreenListener = store.subscribe(\n    (state) => state.fullscreen,\n    async (fullscreen) => {\n      eventBuffer.addEvent({\n        id: generateRandomToken(),\n        type: fullscreen ? \"enter-fullscreen\" : \"exit-fullscreen\",\n        timestamp: Date.now()\n      });\n    }\n  );\n  const destroyCanPlayListener = store.subscribe(\n    (state) => state.canPlay,\n    async (canPlay) => {\n      if (canPlay) {\n        eventBuffer.addEvent({\n          id: generateRandomToken(),\n          type: \"can-play\",\n          timestamp: Date.now()\n        });\n      }\n    }\n  );\n  const destroyEndedListener = store.subscribe(\n    (state) => state.ended,\n    async (ended) => {\n      if (ended) {\n        eventBuffer.addEvent({\n          id: generateRandomToken(),\n          type: \"ended\",\n          timestamp: Date.now()\n        });\n      }\n    }\n  );\n  const destroyRateChangeListener = store.subscribe(\n    (state) => state.playbackRate,\n    async (playbackRate) => {\n      eventBuffer.addEvent({\n        id: generateRandomToken(),\n        type: \"rate\",\n        timestamp: Date.now(),\n        payload: playbackRate\n      });\n    }\n  );\n  const destroyVideoQualityListener = store.subscribe(\n    (state) => state.videoQuality,\n    async (videoQuality) => {\n      eventBuffer.addEvent({\n        id: generateRandomToken(),\n        type: \"video-quality\",\n        timestamp: Date.now(),\n        payload: videoQuality\n      });\n    }\n  );\n  const destroySeekListener = store.subscribe(\n    (state) => state.__controls.requestedRangeToSeekTo,\n    async (rangeToSeekTo) => {\n      eventBuffer.addEvent({\n        id: generateRandomToken(),\n        type: \"seek\",\n        timestamp: Date.now(),\n        payload: rangeToSeekTo\n      });\n    }\n  );\n  const ic = new IncrementalCounter([\n    \"errors\",\n    \"warnings\",\n    \"stalled_count\",\n    \"waiting_count\",\n    \"time_warning_ms\",\n    \"time_errored_ms\",\n    \"time_stalled_ms\",\n    \"time_playing_ms\",\n    \"time_waiting_ms\"\n  ]);\n  const vct = new ValueChangeTracker([\n    \"autoplay_status\",\n    \"mount_to_first_frame_ms\",\n    \"mount_to_play_ms\",\n    \"play_to_first_frame_ms\",\n    \"duration_ms\",\n    \"offset_ms\",\n    \"video_height_px\",\n    \"video_width_px\",\n    \"player_width_px\",\n    \"player_height_px\",\n    \"window_height_px\",\n    \"window_width_px\"\n  ]);\n  let firstFrameSent = false;\n  const sendEvents = ({ isUnloading } = { isUnloading: false }) => async () => {\n    const currentState = store.getState();\n    const currentControlsState = currentState.__controls;\n    if (!currentState.currentSource) {\n      warn(\"Not sending metrics since no current playback source parsed.\");\n      return;\n    }\n    if (!currentControlsState.playbackId) {\n      warn(\"Not sending metrics since no playback ID parsed.\");\n      return;\n    }\n    const metricsSnapshot = monitor.getMetrics();\n    if (!firstFrameSent && monitor.firstFrameTimestamp) {\n      eventBuffer.addEvent({\n        id: generateRandomToken(),\n        type: \"first-frame\",\n        timestamp: monitor.firstFrameTimestamp\n      });\n      firstFrameSent = true;\n    }\n    eventBuffer.addEvent({\n      id: generateRandomToken(),\n      type: \"heartbeat\",\n      timestamp: Date.now(),\n      errors: ic.calculateIncrement(\"errors\", metricsSnapshot.errorCount),\n      warnings: ic.calculateIncrement(\n        \"warnings\",\n        metricsSnapshot.warningCount\n      ),\n      stalled_count: ic.calculateIncrement(\n        \"stalled_count\",\n        metricsSnapshot.stalledCount\n      ),\n      waiting_count: ic.calculateIncrement(\n        \"waiting_count\",\n        metricsSnapshot.waitingCount\n      ),\n      time_errored_ms: ic.calculateIncrement(\n        \"time_errored_ms\",\n        metricsSnapshot.timeErrored\n      ),\n      time_warning_ms: ic.calculateIncrement(\n        \"time_warning_ms\",\n        metricsSnapshot.timeWarning\n      ),\n      time_stalled_ms: ic.calculateIncrement(\n        \"time_stalled_ms\",\n        metricsSnapshot.timeStalled\n      ),\n      time_playing_ms: ic.calculateIncrement(\n        \"time_playing_ms\",\n        metricsSnapshot.timePlaying\n      ),\n      time_waiting_ms: ic.calculateIncrement(\n        \"time_waiting_ms\",\n        metricsSnapshot.timeWaiting\n      ),\n      // The properties below are only sent once.\n      autoplay_status: vct.sendIfChanged(\n        \"autoplay_status\",\n        currentState.__initialProps.autoPlay ? \"autoplay\" : \"none\"\n      ),\n      mount_to_play_ms: vct.sendIfChanged(\n        \"mount_to_play_ms\",\n        metricsSnapshot.mountToPlay ?? void 0\n      ),\n      mount_to_first_frame_ms: vct.sendIfChanged(\n        \"mount_to_first_frame_ms\",\n        metricsSnapshot.mountToFirstFrame ?? void 0\n      ),\n      play_to_first_frame_ms: vct.sendIfChanged(\n        \"play_to_first_frame_ms\",\n        metricsSnapshot.playToFirstFrame ?? void 0\n      ),\n      duration_ms: currentState?.live ? void 0 : vct.sendIfChanged(\n        \"duration_ms\",\n        metricsSnapshot.duration ?? void 0\n      ),\n      offset_ms: vct.sendIfChanged(\n        \"offset_ms\",\n        metricsSnapshot.offset ?? void 0\n      ),\n      // The properties below are only sent when they change.\n      video_height_px: vct.sendIfChanged(\n        \"video_height_px\",\n        metricsSnapshot.videoHeight ?? void 0\n      ),\n      video_width_px: vct.sendIfChanged(\n        \"video_width_px\",\n        metricsSnapshot.videoWidth ?? void 0\n      ),\n      player_height_px: vct.sendIfChanged(\n        \"player_height_px\",\n        metricsSnapshot.playerHeight ?? void 0\n      ),\n      player_width_px: vct.sendIfChanged(\n        \"player_width_px\",\n        metricsSnapshot.playerWidth ?? void 0\n      ),\n      window_height_px: vct.sendIfChanged(\n        \"window_height_px\",\n        metricsSnapshot.windowHeight ?? void 0\n      ),\n      window_width_px: vct.sendIfChanged(\n        \"window_width_px\",\n        metricsSnapshot.windowWidth ?? void 0\n      )\n    });\n    const internalEvents = eventBuffer.getInternalEvents();\n    try {\n      await opts?.onPlaybackEvents?.(internalEvents);\n    } catch (e) {\n      console.error(e);\n      eventBuffer.onInternalFailure(internalEvents);\n    }\n    const metricsUrl = currentState.metricsReportingUrl;\n    if (metricsUrl) {\n      const abortController = new AbortController();\n      const id = setTimeout(\n        () => abortController.abort(),\n        interval - 500\n        // we abort 500ms before the next request is scheduled\n      );\n      const externalEvents = eventBuffer.getExternalEvents();\n      if (isUnloading && externalEvents.length === 0) {\n        return;\n      }\n      try {\n        const windowHref = typeof window !== \"undefined\" ? window?.location?.href ?? null : null;\n        const pageUrlString = isInIframe2() ? typeof document !== \"undefined\" ? document?.referrer || windowHref : windowHref : windowHref;\n        const pageUrl = pageUrlString ? new URL(pageUrlString) : null;\n        const playerPrefix = currentState?.currentSource?.type ?? \"unknown\";\n        const version = currentState?.__device.version ?? \"unknown\";\n        const sessionData = {\n          live: currentState.live,\n          session_id: currentControlsState.sessionToken,\n          playback_id: currentControlsState.playbackId,\n          protocol: currentState.currentSource.mime ?? void 0,\n          domain: pageUrl?.hostname ?? null,\n          path: pageUrl?.pathname ?? null,\n          params: pageUrl?.search ?? null,\n          hash: pageUrl?.hash ?? null,\n          source_url: currentState.currentSource.src,\n          player: playerPrefix,\n          version,\n          user_agent: String(currentState?.__device?.userAgent ?? \"\").replace(\n            /\\\\|\"/gm,\n            \"\"\n          ),\n          uid: currentState.__initialProps.viewerId ?? void 0,\n          events: externalEvents\n        };\n        const data = JSON.stringify(sessionData);\n        if (isUnloading && isSendBeaconAvailable) {\n          const success = window?.navigator?.sendBeacon?.(metricsUrl, data);\n          if (!success) {\n            throw new Error(\"Beacon response was not OK\");\n          }\n        } else {\n          const response = await fetch(metricsUrl, {\n            method: \"POST\",\n            mode: \"cors\",\n            body: data,\n            signal: abortController.signal\n          });\n          await response.text();\n          if (!response.ok) {\n            throw new Error(\"Fetch response was not OK\");\n          }\n        }\n      } catch (e) {\n        console.error(\n          new Error(\n            e?.message ?? \"Error with metrics reporting, re-enqueuing events...\"\n          )\n        );\n        eventBuffer.onExternalFailure(externalEvents);\n      } finally {\n        clearTimeout(id);\n      }\n    }\n  };\n  const eventsTimer = setInterval(sendEvents(), interval);\n  const unloadEvent = \"onpagehide\" in self ? \"pagehide\" : \"unload\";\n  const unloadingCallback = sendEvents({ isUnloading: true });\n  window?.addEventListener?.(unloadEvent, unloadingCallback);\n  const onVisibilityChange = async () => {\n    if (document.visibilityState === \"hidden\") {\n      return unloadingCallback();\n    }\n  };\n  window?.addEventListener?.(\"visibilitychange\", onVisibilityChange);\n  return {\n    destroy: () => {\n      if (eventsTimer) {\n        clearInterval?.(eventsTimer);\n      }\n      destroyCanPlayListener?.();\n      destroyClipListener?.();\n      destroyEndedListener?.();\n      destroyErrorListener?.();\n      destroyFinalUrlListener?.();\n      destroyFullscreenListener?.();\n      destroyPipListener?.();\n      destroyPlayListener?.();\n      destroyPauseListener?.();\n      destroyRateChangeListener?.();\n      destroySeekListener?.();\n      destroyVideoQualityListener?.();\n      window?.removeEventListener?.(\"visibilitychange\", onVisibilityChange);\n    }\n  };\n}\nfunction isInIframe2() {\n  try {\n    return typeof window !== \"undefined\" && window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\nvar PlaybackEventBuffer = class {\n  internalBuffer = [];\n  externalBuffer = [];\n  // we cap at 25k events, which assumed that each event could be max 200 bytes\n  // this should be revised when event structure changes\n  maxBufferSize = 25e3;\n  addEvent(event) {\n    this.addEvents([event]);\n  }\n  addEvents(events) {\n    for (const newEvent of [...events]) {\n      if (newEvent.type !== \"heartbeat\") {\n        this.externalBuffer.push(newEvent);\n        continue;\n      }\n      const existingEventIndex = this.externalBuffer.findIndex(\n        (event) => event.type === \"heartbeat\"\n      );\n      if (existingEventIndex === -1) {\n        this.externalBuffer.push(newEvent);\n      } else {\n        const existingEvent = this.externalBuffer[existingEventIndex];\n        const mergedEvent = {\n          ...existingEvent,\n          id: existingEvent.id,\n          timestamp: Math.max(existingEvent.timestamp, newEvent.timestamp),\n          oldest_buffer_timestamp: Math.min(\n            Math.min(\n              existingEvent.oldest_buffer_timestamp ?? Number.MAX_SAFE_INTEGER,\n              newEvent.timestamp ?? Number.MAX_SAFE_INTEGER\n            ),\n            existingEvent.timestamp\n          ),\n          errors: existingEvent.errors + newEvent.errors,\n          warnings: existingEvent.warnings + newEvent.warnings,\n          stalled_count: existingEvent.stalled_count + newEvent.stalled_count,\n          waiting_count: existingEvent.waiting_count + newEvent.waiting_count,\n          time_warning_ms: existingEvent.time_warning_ms + newEvent.time_warning_ms,\n          time_errored_ms: existingEvent.time_errored_ms + newEvent.time_errored_ms,\n          time_stalled_ms: existingEvent.time_stalled_ms + newEvent.time_stalled_ms,\n          time_playing_ms: existingEvent.time_playing_ms + newEvent.time_playing_ms,\n          time_waiting_ms: existingEvent.time_waiting_ms + newEvent.time_waiting_ms,\n          ...existingEvent.mount_to_first_frame_ms || newEvent.mount_to_first_frame_ms ? {\n            mount_to_first_frame_ms: (existingEvent.mount_to_first_frame_ms ?? 0) + (newEvent.mount_to_first_frame_ms ?? 0)\n          } : {},\n          ...existingEvent.mount_to_play_ms || newEvent.mount_to_play_ms ? {\n            mount_to_play_ms: (existingEvent.mount_to_play_ms ?? 0) + (newEvent.mount_to_play_ms ?? 0)\n          } : {},\n          ...existingEvent.play_to_first_frame_ms || newEvent.play_to_first_frame_ms ? {\n            play_to_first_frame_ms: (existingEvent.play_to_first_frame_ms ?? 0) + (newEvent.play_to_first_frame_ms ?? 0)\n          } : {}\n        };\n        this.externalBuffer[existingEventIndex] = mergedEvent;\n      }\n    }\n    this.internalBuffer = [...events, ...this.internalBuffer];\n    this.trimBuffer();\n  }\n  getInternalEvents() {\n    const eventsToSend = [...this.internalBuffer];\n    this.internalBuffer = [];\n    return eventsToSend;\n  }\n  getExternalEvents() {\n    const eventsToSend = [...this.externalBuffer];\n    this.externalBuffer = [];\n    return eventsToSend;\n  }\n  onInternalFailure(pendingEvents) {\n    this.internalBuffer = [...this.internalBuffer, ...pendingEvents];\n    this.trimBuffer();\n  }\n  onExternalFailure(pendingEvents) {\n    this.externalBuffer = [...this.externalBuffer, ...pendingEvents];\n    this.trimBuffer();\n  }\n  trimBuffer() {\n    if (this.internalBuffer.length > this.maxBufferSize) {\n      const excess = this.internalBuffer.length - this.maxBufferSize;\n      this.internalBuffer = this.internalBuffer.slice(excess);\n    }\n    if (this.externalBuffer.length > this.maxBufferSize) {\n      const excess = this.externalBuffer.length - this.maxBufferSize;\n      this.externalBuffer = this.externalBuffer.slice(excess);\n    }\n  }\n};\nvar IncrementalCounter = class {\n  counts;\n  constructor(keys) {\n    this.counts = keys.reduce(\n      (acc, key) => {\n        acc[key] = 0;\n        return acc;\n      },\n      {}\n    );\n  }\n  calculateIncrement(key, newCount) {\n    if (newCount < this.counts[key]) {\n      return 0;\n    }\n    const increment = newCount - this.counts[key];\n    this.counts[key] = newCount;\n    return increment;\n  }\n};\nvar ValueChangeTracker = class {\n  lastValues;\n  constructor(keys) {\n    this.lastValues = keys.reduce(\n      (acc, key) => {\n        acc[key] = void 0;\n        return acc;\n      },\n      {}\n    );\n  }\n  sendIfChanged(key, newValue) {\n    if (this.lastValues[key] !== newValue) {\n      this.lastValues[key] = newValue;\n      return newValue;\n    }\n    return void 0;\n  }\n};\nvar Timer2 = class {\n  totalTime = 0;\n  countStarts = 0;\n  startTime = 0;\n  start() {\n    this.startTime = Date.now();\n    this.countStarts++;\n  }\n  stop() {\n    this.totalTime += this.startTime > 0 ? Date.now() - this.startTime : 0;\n    this.startTime = 0;\n  }\n  getTotalTime() {\n    this.totalTime += this.startTime > 0 ? Date.now() - this.startTime : 0;\n    this.startTime = this.startTime > 0 ? Date.now() : 0;\n    return this.totalTime;\n  }\n  getCountStarts() {\n    return this.countStarts;\n  }\n};\nvar MetricsMonitor = class {\n  retryCount = 0;\n  connected = false;\n  store;\n  destroy;\n  firstFrameTimestamp = null;\n  currentMetrics;\n  previousMetrics = null;\n  timerErrored = new Timer2();\n  timerWaiting = new Timer2();\n  timerStalled = new Timer2();\n  timerWarning = new Timer2();\n  timerPlaying = new Timer2();\n  constructor(store, opts) {\n    this.store = store;\n    this.currentMetrics = {\n      mountToPlay: null,\n      mountToFirstFrame: null,\n      playToFirstFrame: null,\n      duration: null,\n      errorCount: 0,\n      warningCount: 0,\n      offset: null,\n      playerHeight: null,\n      playerWidth: null,\n      stalledCount: 0,\n      timeErrored: 0,\n      timeWarning: 0,\n      timeStalled: 0,\n      timePlaying: 0,\n      timeWaiting: 0,\n      videoHeight: null,\n      videoWidth: null,\n      waitingCount: 0,\n      windowHeight: null,\n      windowWidth: null\n    };\n    const destroyFirstPlayListener = store.subscribe(\n      (state) => state.__controls.playLastTime,\n      async (playLastTime) => {\n        if (playLastTime >= 0) {\n          if (this.currentMetrics.mountToPlay === null) {\n            this.currentMetrics.mountToPlay = Math.max(\n              playLastTime - globalLoadTimestampMs,\n              0\n            );\n          }\n        }\n      }\n    );\n    const destroyPlayingListener = store.subscribe(\n      (state) => state.playing,\n      async (playing) => {\n        if (playing) {\n          this.timerWarning.stop();\n          this.timerErrored.stop();\n          this.timerStalled.stop();\n          this.timerWaiting.stop();\n          this.timerPlaying.start();\n        } else {\n          this.timerPlaying.stop();\n        }\n      }\n    );\n    const destroyPlayLastTimeListener = store.subscribe(\n      (state) => state.__controls.playLastTime,\n      async (playLastTime) => {\n        if (playLastTime >= 0) {\n          this.timerWarning.stop();\n          this.timerErrored.stop();\n          this.timerStalled.stop();\n          this.timerWaiting.stop();\n          this.timerPlaying.start();\n        }\n      }\n    );\n    const destroyProgressListener = store.subscribe(\n      (state) => state.progress,\n      async () => {\n        if (opts.disableProgressListener !== true && !this.timerPlaying.startTime) {\n          this.timerWarning.stop();\n          this.timerErrored.stop();\n          this.timerStalled.stop();\n          this.timerWaiting.stop();\n          this.timerPlaying.start();\n        }\n        const now = Date.now();\n        if (this.currentMetrics.mountToFirstFrame === null) {\n          this.currentMetrics.mountToFirstFrame = Math.max(\n            now - globalLoadTimestampMs,\n            0\n          );\n        }\n        if (this.currentMetrics.playToFirstFrame === null && this.currentMetrics.mountToPlay !== null) {\n          this.currentMetrics.playToFirstFrame = Math.max(\n            now - this.currentMetrics.mountToPlay - globalLoadTimestampMs,\n            0\n          );\n          this.firstFrameTimestamp = now;\n        }\n      }\n    );\n    const destroyErroredListener = store.subscribe(\n      (state) => state.error,\n      async (error) => {\n        if (error?.type) {\n          const isWarning = error.type === \"offline\" || error.type === \"fallback\";\n          if (isWarning) {\n            this.timerWarning.start();\n          } else {\n            this.timerErrored.start();\n          }\n          this.timerPlaying.stop();\n          if (isWarning) {\n            this.addWarning();\n          } else {\n            this.addError();\n          }\n        }\n      }\n    );\n    const destroyStalledListener = store.subscribe(\n      (state) => state.stalled,\n      async (stalled) => {\n        if (stalled) {\n          this.timerStalled.start();\n          this.timerPlaying.stop();\n        }\n      }\n    );\n    const destroyWaitingListener = store.subscribe(\n      (state) => state.waiting,\n      async (waiting) => {\n        if (waiting) {\n          this.timerWaiting.start();\n          this.timerPlaying.stop();\n        }\n      }\n    );\n    this.destroy = () => {\n      destroyErroredListener?.();\n      destroyFirstPlayListener?.();\n      destroyPlayingListener?.();\n      destroyPlayLastTimeListener?.();\n      destroyProgressListener?.();\n      destroyStalledListener?.();\n      destroyWaitingListener?.();\n    };\n  }\n  addError() {\n    this.currentMetrics.errorCount = this.currentMetrics.errorCount + 1;\n  }\n  addWarning() {\n    this.currentMetrics.warningCount = this.currentMetrics.warningCount + 1;\n  }\n  setConnected(isConnected) {\n    this.connected = isConnected;\n  }\n  getMetrics() {\n    const duration = this.store.getState().duration;\n    const currentMetrics = {\n      ...this.currentMetrics,\n      playerHeight: this.store.getState().__controls.size?.container?.height || null,\n      playerWidth: this.store.getState().__controls.size?.container?.width || null,\n      videoWidth: this.store.getState().__controls.size?.media?.width || null,\n      videoHeight: this.store.getState().__controls.size?.media?.height || null,\n      windowWidth: this.store.getState().__controls.size?.window?.width || null,\n      windowHeight: this.store.getState().__controls.size?.window?.height || null,\n      duration: Number.isFinite(duration) && !Number.isNaN(duration) ? Math.floor(duration * 1e3) : null,\n      waitingCount: this.timerWaiting.getCountStarts(),\n      stalledCount: this.timerStalled.getCountStarts(),\n      timeWarning: this.timerWarning.getTotalTime(),\n      timeErrored: this.timerErrored.getTotalTime(),\n      timeWaiting: this.timerWaiting.getTotalTime(),\n      timeStalled: this.timerStalled.getTotalTime(),\n      timePlaying: this.timerPlaying.getTotalTime(),\n      offset: this.store.getState().__controls.playbackOffsetMs ?? null\n    };\n    return currentMetrics;\n  }\n};\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livepeer/core/dist/media/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livepeer/core/dist/storage/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@livepeer/core/dist/storage/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createStorage: () => (/* binding */ createStorage),\n/* harmony export */   noopStorage: () => (/* binding */ noopStorage)\n/* harmony export */ });\n// src/media/storage.ts\nvar noopStorage = {\n  getItem: (_key) => \"\",\n  setItem: (_key, _value) => {\n  },\n  removeItem: (_key) => {\n  }\n};\nfunction createStorage({\n  storage = noopStorage,\n  key: prefix = \"livepeer\"\n}) {\n  return {\n    getItem: async (key, defaultState = null) => {\n      try {\n        const value = await storage.getItem(`${prefix}.${key}`);\n        return value ? JSON.parse(value) : defaultState;\n      } catch (error) {\n        console.warn(error);\n        return defaultState;\n      }\n    },\n    setItem: async (key, value) => {\n      if (value === null) {\n        await storage.removeItem(`${prefix}.${key}`);\n      } else {\n        try {\n          await storage.setItem(`${prefix}.${key}`, JSON.stringify(value));\n        } catch (err) {\n          console.error(err);\n        }\n      }\n    },\n    removeItem: async (key) => storage.removeItem(`${prefix}.${key}`)\n  };\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVwZWVyL2NvcmUvZGlzdC9zdG9yYWdlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxPQUFPLEdBQUcsSUFBSTtBQUM3RDtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG9DQUFvQyxPQUFPLEdBQUcsSUFBSTtBQUNsRCxRQUFRO0FBQ1I7QUFDQSxtQ0FBbUMsT0FBTyxHQUFHLElBQUk7QUFDakQsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxxREFBcUQsT0FBTyxHQUFHLElBQUk7QUFDbkU7QUFDQTtBQUlFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWt0b2stdG9rZW4tbGF1bmNocGFkLy4vbm9kZV9tb2R1bGVzL0BsaXZlcGVlci9jb3JlL2Rpc3Qvc3RvcmFnZS9pbmRleC5qcz83MGVkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy9tZWRpYS9zdG9yYWdlLnRzXG52YXIgbm9vcFN0b3JhZ2UgPSB7XG4gIGdldEl0ZW06IChfa2V5KSA9PiBcIlwiLFxuICBzZXRJdGVtOiAoX2tleSwgX3ZhbHVlKSA9PiB7XG4gIH0sXG4gIHJlbW92ZUl0ZW06IChfa2V5KSA9PiB7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVTdG9yYWdlKHtcbiAgc3RvcmFnZSA9IG5vb3BTdG9yYWdlLFxuICBrZXk6IHByZWZpeCA9IFwibGl2ZXBlZXJcIlxufSkge1xuICByZXR1cm4ge1xuICAgIGdldEl0ZW06IGFzeW5jIChrZXksIGRlZmF1bHRTdGF0ZSA9IG51bGwpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgc3RvcmFnZS5nZXRJdGVtKGAke3ByZWZpeH0uJHtrZXl9YCk7XG4gICAgICAgIHJldHVybiB2YWx1ZSA/IEpTT04ucGFyc2UodmFsdWUpIDogZGVmYXVsdFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRTdGF0ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNldEl0ZW06IGFzeW5jIChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgYXdhaXQgc3RvcmFnZS5yZW1vdmVJdGVtKGAke3ByZWZpeH0uJHtrZXl9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IHN0b3JhZ2Uuc2V0SXRlbShgJHtwcmVmaXh9LiR7a2V5fWAsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlSXRlbTogYXN5bmMgKGtleSkgPT4gc3RvcmFnZS5yZW1vdmVJdGVtKGAke3ByZWZpeH0uJHtrZXl9YClcbiAgfTtcbn1cbmV4cG9ydCB7XG4gIGNyZWF0ZVN0b3JhZ2UsXG4gIG5vb3BTdG9yYWdlXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livepeer/core/dist/storage/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livepeer/core/dist/utils/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@livepeer/core/dist/utils/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   b64Decode: () => (/* binding */ b64Decode),\n/* harmony export */   b64Encode: () => (/* binding */ b64Encode),\n/* harmony export */   b64UrlDecode: () => (/* binding */ b64UrlDecode),\n/* harmony export */   b64UrlEncode: () => (/* binding */ b64UrlEncode),\n/* harmony export */   deepMerge: () => (/* binding */ deepMerge),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   parseArweaveTxId: () => (/* binding */ parseArweaveTxId),\n/* harmony export */   parseCid: () => (/* binding */ parseCid),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var multiformats_cid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! multiformats/cid */ \"(ssr)/./node_modules/multiformats/dist/src/cid.js\");\n// src/utils/deepMerge.ts\nvar isObject = (obj) => {\n  if (typeof obj === \"object\" && obj !== null) {\n    if (typeof Object.getPrototypeOf === \"function\") {\n      const prototype = Object.getPrototypeOf(obj);\n      return prototype === Object.prototype || prototype === null;\n    }\n    return Object.prototype.toString.call(obj) === \"[object Object]\";\n  }\n  return false;\n};\nvar merge = (...objects) => objects.reduce((result, current) => {\n  if (Array.isArray(current)) {\n    throw new TypeError(\n      \"Arguments provided to ts-deepmerge must be objects, not arrays.\"\n    );\n  }\n  Object.keys(current).forEach((key) => {\n    if ([\"__proto__\", \"constructor\", \"prototype\"].includes(key)) {\n      return;\n    }\n    if (Array.isArray(result[key]) && Array.isArray(current[key])) {\n      result[key] = merge.options.mergeArrays ? Array.from(new Set(result[key].concat(current[key]))) : current[key];\n    } else if (isObject(result[key]) && isObject(current[key])) {\n      result[key] = merge(result[key], current[key]);\n    } else {\n      result[key] = current[key];\n    }\n  });\n  return result;\n}, {});\nvar defaultOptions = {\n  mergeArrays: true\n};\nmerge.options = defaultOptions;\nmerge.withOptions = (options, ...objects) => {\n  merge.options = {\n    mergeArrays: true,\n    ...options\n  };\n  const result = merge(...objects);\n  merge.options = defaultOptions;\n  return result;\n};\nvar deepMerge = merge;\n\n// src/utils/omick.ts\nvar pick = (obj, ...keys) => {\n  try {\n    const objectKeys = Object.keys(obj);\n    return keys.filter((key) => objectKeys.includes(key)).reduce(\n      (prev, curr) => ({\n        // biome-ignore lint/performance/noAccumulatingSpread: <explanation>\n        ...prev,\n        [curr]: obj[curr]\n      }),\n      {}\n    );\n  } catch (e) {\n    throw new Error(\"Could not pick keys for object.\");\n  }\n};\nfunction omit(obj, ...keys) {\n  try {\n    const objectKeys = Object.keys(obj);\n    return objectKeys.filter((objectKey) => !keys.some((key) => String(key) === objectKey)).reduce(\n      (prev, curr) => ({\n        // biome-ignore lint/performance/noAccumulatingSpread: <explanation>\n        ...prev,\n        [curr]: obj[curr]\n      }),\n      {}\n    );\n  } catch (e) {\n    throw new Error(\"Could not omit keys for object.\");\n  }\n}\n\n// src/utils/storage/arweave.ts\nvar arweaveProtocolPattern = /^(ar):\\/\\/([^/?#]+)(.*)$/;\nvar pathGatewayPattern = /^https:\\/\\/(arweave\\.net|arweave\\.dev)\\/([^/?#]+)(.*)$/;\nvar subdomainGatewayPattern = /^https:\\/\\/([^/]+)\\.(arweave\\.net|arweave\\.dev)\\/([^/?#]+)(.*)$/;\nvar parseArweaveTxId = (possibleArweaveString) => {\n  if (!possibleArweaveString) {\n    return null;\n  }\n  const arweaveProtocolHash = possibleArweaveString.match(\n    arweaveProtocolPattern\n  )?.[2];\n  const arweaveProtocolUrlIndicators = possibleArweaveString.match(\n    arweaveProtocolPattern\n  )?.[3];\n  if (arweaveProtocolHash) {\n    return formatReturnHash(arweaveProtocolHash, arweaveProtocolUrlIndicators);\n  }\n  const subdomainGatewayHash = possibleArweaveString.match(\n    subdomainGatewayPattern\n  )?.[3];\n  const subdomainGatewayUrlIndicators = possibleArweaveString.match(\n    subdomainGatewayPattern\n  )?.[4];\n  if (subdomainGatewayHash) {\n    return formatReturnHash(\n      subdomainGatewayHash,\n      subdomainGatewayUrlIndicators\n    );\n  }\n  const pathGatewayHash = possibleArweaveString.match(pathGatewayPattern)?.[2];\n  const pathGatewayUrlIndicators = possibleArweaveString.match(pathGatewayPattern)?.[3];\n  if (pathGatewayHash) {\n    return formatReturnHash(pathGatewayHash, pathGatewayUrlIndicators);\n  }\n  return null;\n};\nvar formatReturnHash = (hash, urlIndicators) => {\n  const hashWithUrlIndicators = `${hash}${urlIndicators ?? \"\"}`;\n  return {\n    url: `ar://${hashWithUrlIndicators}`,\n    id: hashWithUrlIndicators\n  };\n};\n\n// src/utils/storage/ipfs.ts\n\nvar ipfsCidPattern = /^([^/?#]+)$/;\nvar ipfsProtocolPattern = /^(ipfs):\\/\\/([^/?#]+)(.*)$/;\nvar pathGatewayPattern2 = /^https?:\\/\\/[^/]+\\/(ipfs)\\/([^/?#]+)(.*)$/;\nvar subdomainGatewayPattern2 = /^https?:\\/\\/([^/]+)\\.(ipfs)\\.[^/?#]+(.*)$/;\nvar parseCid = (possibleIpfsString) => {\n  if (!possibleIpfsString) {\n    return null;\n  }\n  const ipfsProtocolCid = possibleIpfsString.match(ipfsProtocolPattern)?.[2];\n  const ipfsProtocolUrlIndicators = possibleIpfsString.match(ipfsProtocolPattern)?.[3];\n  if (isCid(ipfsProtocolCid)) {\n    return formatReturnCid(ipfsProtocolCid, ipfsProtocolUrlIndicators);\n  }\n  const subdomainGatewayCid = possibleIpfsString.match(\n    subdomainGatewayPattern2\n  )?.[1];\n  const subdomainGatewayUrlIndicators = possibleIpfsString.match(\n    subdomainGatewayPattern2\n  )?.[3];\n  if (isCid(subdomainGatewayCid)) {\n    return formatReturnCid(subdomainGatewayCid, subdomainGatewayUrlIndicators);\n  }\n  const pathGatewayCid = possibleIpfsString.match(pathGatewayPattern2)?.[2];\n  const pathGatewayUrlIndicators = possibleIpfsString.match(pathGatewayPattern2)?.[3];\n  if (isCid(pathGatewayCid)) {\n    return formatReturnCid(pathGatewayCid, pathGatewayUrlIndicators);\n  }\n  const ipfsCid = possibleIpfsString.match(ipfsCidPattern)?.[1];\n  if (isCid(ipfsCid)) {\n    return formatReturnCid(ipfsCid);\n  }\n  return null;\n};\nvar isCid = (hash) => {\n  try {\n    if (!hash) {\n      return false;\n    }\n    if (typeof hash === \"string\") {\n      return Boolean(multiformats_cid__WEBPACK_IMPORTED_MODULE_0__.CID.parse(hash));\n    }\n    if (hash instanceof Uint8Array) {\n      return Boolean(multiformats_cid__WEBPACK_IMPORTED_MODULE_0__.CID.decode(hash));\n    }\n    return Boolean(multiformats_cid__WEBPACK_IMPORTED_MODULE_0__.CID.asCID(hash));\n  } catch {\n    return false;\n  }\n};\nvar formatReturnCid = (cid, urlIndicators) => {\n  const cidWithUrlIndicators = `${cid}${urlIndicators ?? \"\"}`;\n  return {\n    url: `ipfs://${cidWithUrlIndicators}`,\n    id: cidWithUrlIndicators\n  };\n};\n\n// src/utils/string.ts\nvar b64Encode = (input) => {\n  try {\n    if (typeof window !== \"undefined\" && \"btoa\" in window) {\n      return window?.btoa?.(input) ?? null;\n    }\n    return Buffer?.from(input, \"binary\")?.toString(\"base64\") ?? null;\n  } catch (e) {\n    return null;\n  }\n};\nvar b64Decode = (input) => {\n  try {\n    if (typeof window !== \"undefined\" && \"atob\" in window) {\n      return window?.atob?.(input) ?? null;\n    }\n    return Buffer?.from(input, \"base64\")?.toString(\"binary\") ?? null;\n  } catch (e) {\n    return null;\n  }\n};\nvar b64UrlEncode = (input) => {\n  return escapeInput(b64Encode(input));\n};\nvar b64UrlDecode = (input) => {\n  const unescaped = unescapeInput(input);\n  if (unescaped) {\n    return b64Decode(unescaped);\n  }\n  return null;\n};\nvar unescapeInput = (input) => {\n  return input ? (input + \"===\".slice((input.length + 3) % 4)).replace(/-/g, \"+\").replace(/_/g, \"/\") : null;\n};\nvar escapeInput = (input) => {\n  return input?.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\") ?? null;\n};\n\n// src/utils/types.ts\nvar noop = (..._args) => {\n};\n\n// src/utils/warn.ts\nvar cache = /* @__PURE__ */ new Set();\nfunction warn(message, id) {\n  if (!cache.has(id ?? message)) {\n    console.warn(message);\n    cache.add(message);\n  }\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livepeer/core/dist/utils/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livepeer/core/dist/version/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@livepeer/core/dist/version/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n// src/version.ts\nvar core = \"@livepeer/core@3.3.1\";\nvar react = \"@livepeer/react@4.3.4\";\nvar version = {\n  core,\n  react\n};\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVwZWVyL2NvcmUvZGlzdC92ZXJzaW9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdFO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aWt0b2stdG9rZW4tbGF1bmNocGFkLy4vbm9kZV9tb2R1bGVzL0BsaXZlcGVlci9jb3JlL2Rpc3QvdmVyc2lvbi9pbmRleC5qcz83ZTdlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHNyYy92ZXJzaW9uLnRzXG52YXIgY29yZSA9IFwiQGxpdmVwZWVyL2NvcmVAMy4zLjFcIjtcbnZhciByZWFjdCA9IFwiQGxpdmVwZWVyL3JlYWN0QDQuMy40XCI7XG52YXIgdmVyc2lvbiA9IHtcbiAgY29yZSxcbiAgcmVhY3Rcbn07XG5leHBvcnQge1xuICB2ZXJzaW9uXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livepeer/core/dist/version/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livepeer/react/dist/player/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@livepeer/react/dist/player/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClipTrigger: () => (/* binding */ ClipTrigger),\n/* harmony export */   Container: () => (/* binding */ Container),\n/* harmony export */   Controls: () => (/* binding */ Controls),\n/* harmony export */   ErrorIndicator: () => (/* binding */ ErrorIndicator),\n/* harmony export */   FullscreenIndicator: () => (/* binding */ FullscreenIndicator),\n/* harmony export */   FullscreenTrigger: () => (/* binding */ FullscreenTrigger),\n/* harmony export */   LiveIndicator: () => (/* binding */ LiveIndicator),\n/* harmony export */   LoadingIndicator: () => (/* binding */ LoadingIndicator),\n/* harmony export */   MediaProvider: () => (/* binding */ MediaProvider),\n/* harmony export */   MuteTrigger: () => (/* binding */ MuteTrigger),\n/* harmony export */   PictureInPictureTrigger: () => (/* binding */ PictureInPictureTrigger),\n/* harmony export */   PlayPauseTrigger: () => (/* binding */ PlayPauseTrigger),\n/* harmony export */   PlayingIndicator: () => (/* binding */ PlayingIndicator),\n/* harmony export */   Portal: () => (/* binding */ Portal),\n/* harmony export */   Poster: () => (/* binding */ Poster),\n/* harmony export */   Range: () => (/* binding */ Range2),\n/* harmony export */   RateSelect: () => (/* binding */ RateSelect),\n/* harmony export */   RateSelectItem: () => (/* binding */ RateSelectItem),\n/* harmony export */   Root: () => (/* binding */ Root),\n/* harmony export */   Seek: () => (/* binding */ Seek),\n/* harmony export */   SeekBuffer: () => (/* binding */ SeekBuffer),\n/* harmony export */   SelectArrow: () => (/* binding */ SelectArrow2),\n/* harmony export */   SelectContent: () => (/* binding */ SelectContent2),\n/* harmony export */   SelectGroup: () => (/* binding */ SelectGroup2),\n/* harmony export */   SelectIcon: () => (/* binding */ SelectIcon2),\n/* harmony export */   SelectItemIndicator: () => (/* binding */ SelectItemIndicator2),\n/* harmony export */   SelectItemText: () => (/* binding */ SelectItemText2),\n/* harmony export */   SelectLabel: () => (/* binding */ SelectLabel2),\n/* harmony export */   SelectPortal: () => (/* binding */ SelectPortal2),\n/* harmony export */   SelectScrollDownButton: () => (/* binding */ SelectScrollDownButton2),\n/* harmony export */   SelectScrollUpButton: () => (/* binding */ SelectScrollUpButton2),\n/* harmony export */   SelectSeparator: () => (/* binding */ SelectSeparator2),\n/* harmony export */   SelectTrigger: () => (/* binding */ SelectTrigger2),\n/* harmony export */   SelectValue: () => (/* binding */ SelectValue2),\n/* harmony export */   SelectViewport: () => (/* binding */ SelectViewport2),\n/* harmony export */   Thumb: () => (/* binding */ Thumb2),\n/* harmony export */   Time: () => (/* binding */ Time),\n/* harmony export */   Track: () => (/* binding */ Track2),\n/* harmony export */   Video: () => (/* binding */ Video),\n/* harmony export */   VideoQualitySelect: () => (/* binding */ VideoQualitySelect),\n/* harmony export */   VideoQualitySelectItem: () => (/* binding */ VideoQualitySelectItem),\n/* harmony export */   Volume: () => (/* binding */ Volume),\n/* harmony export */   VolumeIndicator: () => (/* binding */ VolumeIndicator),\n/* harmony export */   createMediaScope: () => (/* binding */ createMediaScope),\n/* harmony export */   useMediaContext: () => (/* binding */ useMediaContext),\n/* harmony export */   useStore: () => (/* binding */ useStore)\n/* harmony export */ });\n/* harmony import */ var _radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @radix-ui/primitive */ \"(ssr)/./node_modules/@radix-ui/primitive/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @radix-ui/react-presence */ \"(ssr)/./node_modules/@radix-ui/react-presence/dist/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zustand/react/shallow */ \"(ssr)/./node_modules/zustand/esm/react/shallow.mjs\");\n/* harmony import */ var _radix_ui_react_context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @radix-ui/react-context */ \"(ssr)/./node_modules/@radix-ui/react-context/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @radix-ui/react-slot */ \"(ssr)/./node_modules/@radix-ui/react-slot/dist/index.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _livepeer_core_media__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @livepeer/core/media */ \"(ssr)/./node_modules/@livepeer/core/dist/media/index.js\");\n/* harmony import */ var _livepeer_core_storage__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @livepeer/core/storage */ \"(ssr)/./node_modules/@livepeer/core/dist/storage/index.js\");\n/* harmony import */ var _livepeer_core_version__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @livepeer/core/version */ \"(ssr)/./node_modules/@livepeer/core/dist/version/index.js\");\n/* harmony import */ var _livepeer_core_web_browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @livepeer/core-web/browser */ \"(ssr)/./node_modules/@livepeer/core-web/dist/browser/index.js\");\n/* harmony import */ var _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @radix-ui/react-select */ \"(ssr)/./node_modules/@radix-ui/react-select/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @radix-ui/react-slider */ \"(ssr)/./node_modules/@radix-ui/react-slider/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @radix-ui/react-compose-refs */ \"(ssr)/./node_modules/@radix-ui/react-compose-refs/dist/index.mjs\");\n/* harmony import */ var _livepeer_core_utils__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @livepeer/core/utils */ \"(ssr)/./node_modules/@livepeer/core/dist/utils/index.js\");\n/* harmony import */ var _radix_ui_react_aspect_ratio__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @radix-ui/react-aspect-ratio */ \"(ssr)/./node_modules/@radix-ui/react-aspect-ratio/dist/index.mjs\");\n/* harmony import */ var _radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @radix-ui/react-portal */ \"(ssr)/./node_modules/@radix-ui/react-portal/dist/index.mjs\");\n/* __next_internal_client_entry_do_not_use__ ClipTrigger,Container,Controls,ErrorIndicator,FullscreenIndicator,FullscreenTrigger,LiveIndicator,LoadingIndicator,MediaProvider,MuteTrigger,PictureInPictureTrigger,PlayPauseTrigger,PlayingIndicator,Portal,Poster,Range,RateSelect,RateSelectItem,Root,Seek,SeekBuffer,SelectArrow,SelectContent,SelectGroup,SelectIcon,SelectItemIndicator,SelectItemText,SelectLabel,SelectPortal,SelectScrollDownButton,SelectScrollUpButton,SelectSeparator,SelectTrigger,SelectValue,SelectViewport,Thumb,Time,Track,Video,VideoQualitySelect,VideoQualitySelectItem,Volume,VolumeIndicator,createMediaScope,useMediaContext,useStore auto */ // src/player/ClipTrigger.tsx\n\n\n\n\n\n// src/shared/context.tsx\n\n\nvar MEDIA_NAME = \"Media\";\nvar [createMediaContext, createMediaScope] = (0,_radix_ui_react_context__WEBPACK_IMPORTED_MODULE_1__.createContextScope)(MEDIA_NAME);\nvar [MediaProvider, useMediaContext] = createMediaContext(MEDIA_NAME);\nvar useStore = zustand__WEBPACK_IMPORTED_MODULE_2__.useStore;\n// src/shared/primitive.tsx\n\n\n\nvar NODES = [\n    \"a\",\n    \"audio\",\n    \"button\",\n    \"div\",\n    \"form\",\n    \"h2\",\n    \"h3\",\n    \"img\",\n    \"input\",\n    \"label\",\n    \"li\",\n    \"nav\",\n    \"ol\",\n    \"p\",\n    \"span\",\n    \"svg\",\n    \"ul\",\n    \"video\"\n];\nvar Primitive = NODES.reduce((primitive, node)=>{\n    const Node = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(// biome-ignore lint/suspicious/noExplicitAny: any\n    (props, forwardedRef)=>{\n        const { asChild, ...primitiveProps } = props;\n        const Comp = asChild ? _radix_ui_react_slot__WEBPACK_IMPORTED_MODULE_4__.Slot : node;\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n            window[Symbol.for(\"radix-ui\")] = true;\n        }, []);\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Comp, {\n            ...primitiveProps,\n            ref: forwardedRef\n        });\n    });\n    Node.displayName = `Primitive.${node}`;\n    return {\n        ...primitive,\n        [node]: Node\n    };\n}, {});\n// src/shared/utils.ts\nvar noPropagate = (cb)=>(event)=>{\n        event.stopPropagation();\n        return cb();\n    };\n// src/player/ClipTrigger.tsx\nvar CLIP_TRIGGER_NAME = \"ClipTrigger\";\nvar ClipTrigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, onClip, ...clipTriggerProps } = props;\n    const context = useMediaContext(CLIP_TRIGGER_NAME, __scopeMedia);\n    const { clipLength, requestClip, playbackId, title } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ __controls, __controlsFunctions, aria, __initialProps })=>({\n            requestClip: __controlsFunctions.requestClip,\n            playbackId: __controls.playbackId,\n            clipLength: __initialProps.clipLength,\n            title: aria.clip\n        })));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (playbackId) {\n            return context.store.subscribe((state)=>state.__controls.requestedClipParams, (params)=>{\n                if (params) {\n                    onClip({\n                        playbackId,\n                        ...params\n                    });\n                }\n            });\n        }\n    }, [\n        playbackId\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || Boolean(clipLength)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.button, {\n        type: \"button\",\n        \"aria-label\": title ?? void 0,\n        title: title ?? void 0,\n        disabled: !playbackId || !requestClip,\n        ...clipTriggerProps,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onClick, noPropagate(requestClip)),\n        ref: forwardedRef,\n        \"data-livepeer-controls-clip-button\": \"\",\n        \"data-visible\": String(Boolean(clipLength))\n    }));\n});\nClipTrigger.displayName = CLIP_TRIGGER_NAME;\n// src/player/Controls.tsx\n\n\n\n\n\nvar CONTROLS_NAME = \"Controls\";\nvar Controls = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { forceMount, __scopeMedia, onClick, style, autoHide, ...controlsProps } = props;\n    const context = useMediaContext(CONTROLS_NAME, __scopeMedia);\n    const { hidden, loading, togglePlay, error } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ hidden: hidden2, loading: loading2, __controlsFunctions, error: error2 })=>({\n            hidden: hidden2,\n            loading: loading2,\n            togglePlay: __controlsFunctions.togglePlay,\n            error: error2?.type ?? null\n        })));\n    const shown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>!hidden && !loading && !error, [\n        hidden,\n        loading,\n        error\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (autoHide !== void 0) {\n            context.store.getState().__controlsFunctions.setAutohide(autoHide);\n        }\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || shown\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.div, {\n        ...controlsProps,\n        ref: forwardedRef,\n        \"data-livepeer-controls\": \"\",\n        \"data-visible\": String(shown),\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(onClick, noPropagate(togglePlay)),\n        style: {\n            ...style,\n            // ensures controls expands in ratio\n            position: \"absolute\",\n            inset: 0\n        }\n    }));\n});\nControls.displayName = CONTROLS_NAME;\n// src/player/LiveIndicator.tsx\n\n\n\nvar LIVE_INDICATOR_NAME = \"LiveIndicator\";\nvar LiveIndicator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, matcher = true, ...liveIndicatorProps } = props;\n    const context = useMediaContext(LIVE_INDICATOR_NAME, __scopeMedia);\n    const live = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, ({ live: live2 })=>live2);\n    const isPresent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>typeof matcher === \"function\" ? matcher(live) : matcher === live, [\n        matcher,\n        live\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || isPresent\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.span, {\n        \"aria-label\": \"live\",\n        ...liveIndicatorProps,\n        ref: forwardedRef,\n        \"data-livepeer-controls-live-indicator\": \"\",\n        \"data-live\": String(Boolean(live)),\n        \"data-visible\": String(isPresent)\n    }));\n});\nLiveIndicator.displayName = LIVE_INDICATOR_NAME;\n// src/player/MuteTrigger.tsx\n\n\n\n\nvar MUTE_TRIGGER_NAME = \"MuteTrigger\";\nvar MuteTrigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, ...playProps } = props;\n    const context = useMediaContext(MUTE_TRIGGER_NAME, __scopeMedia);\n    const { muted, toggleMute } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ __controls, __controlsFunctions })=>({\n            muted: __controls.muted,\n            toggleMute: __controlsFunctions.requestToggleMute\n        })));\n    const title = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>muted ? \"Unmute (m)\" : \"Mute (m)\", [\n        muted\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.button, {\n        type: \"button\",\n        \"aria-pressed\": muted,\n        \"aria-label\": title,\n        title,\n        ...playProps,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onClick, noPropagate(toggleMute)),\n        ref: forwardedRef,\n        \"data-livepeer-controls-mute-trigger\": \"\",\n        \"data-muted\": String(muted)\n    });\n});\nMuteTrigger.displayName = MUTE_TRIGGER_NAME;\n// src/player/Play.tsx\n\n\n\n\n\nvar PLAY_PAUSE_TRIGGER_NAME = \"PlayPauseTrigger\";\nvar PlayPauseTrigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, ...playProps } = props;\n    const context = useMediaContext(PLAY_PAUSE_TRIGGER_NAME, __scopeMedia);\n    const { playing, togglePlay, title } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ playing: playing2, __controlsFunctions, aria })=>({\n            playing: playing2,\n            togglePlay: __controlsFunctions.togglePlay,\n            title: aria.playPause\n        })));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.button, {\n        type: \"button\",\n        \"aria-pressed\": playing,\n        \"aria-label\": title ?? void 0,\n        title: title ?? void 0,\n        ...playProps,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onClick, noPropagate(togglePlay)),\n        ref: forwardedRef,\n        \"data-livepeer-controls-play-pause-trigger\": \"\",\n        \"data-playing\": String(playing)\n    });\n});\nPlayPauseTrigger.displayName = PLAY_PAUSE_TRIGGER_NAME;\nvar PLAYING_INDICATOR_NAME = \"PlayingIndicator\";\nvar PlayingIndicator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, matcher = true, ...playPauseIndicatorProps } = props;\n    const context = useMediaContext(PLAYING_INDICATOR_NAME, __scopeMedia);\n    const playing = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ playing: playing2 })=>playing2));\n    const isPresent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>typeof matcher === \"boolean\" ? matcher === playing : matcher(playing), [\n        playing,\n        matcher\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || isPresent\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.div, {\n        ...playPauseIndicatorProps,\n        ref: forwardedRef,\n        \"data-livepeer-controls-play-pause-indicator\": \"\",\n        \"data-playing\": String(playing),\n        \"data-visible\": String(isPresent)\n    }));\n});\nPlayingIndicator.displayName = PLAYING_INDICATOR_NAME;\n// src/player/Player.tsx\n\n\n\n\n\nvar Player = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo((props)=>{\n    const { aspectRatio = 16 / 9, src, children, jwt, accessKey, storage, onPlaybackEvents, metricsInterval, playbackId, ...rest } = props;\n    const store = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)((0,_livepeer_core_media__WEBPACK_IMPORTED_MODULE_8__.createControllerStore)({\n        device: (0,_livepeer_core_web_browser__WEBPACK_IMPORTED_MODULE_11__.getDeviceInfo)(_livepeer_core_version__WEBPACK_IMPORTED_MODULE_10__.version.react),\n        storage: storage ?? (0,_livepeer_core_storage__WEBPACK_IMPORTED_MODULE_9__.createStorage)(storage !== null && \"undefined\" !== \"undefined\" ? 0 : {\n            storage: _livepeer_core_storage__WEBPACK_IMPORTED_MODULE_9__.noopStorage\n        }),\n        src,\n        playbackId,\n        initialProps: {\n            aspectRatio,\n            jwt,\n            accessKey,\n            ...rest\n        }\n    }));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (jwt) {\n            store?.current?.store.setState((prev)=>({\n                    __initialProps: {\n                        ...prev.__initialProps,\n                        jwt\n                    }\n                }));\n        }\n    }, [\n        jwt\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (accessKey) {\n            store?.current?.store.setState((prev)=>({\n                    __initialProps: {\n                        ...prev.__initialProps,\n                        accessKey\n                    }\n                }));\n        }\n    }, [\n        accessKey\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            store?.current?.destroy?.();\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const metrics = (0,_livepeer_core_media__WEBPACK_IMPORTED_MODULE_8__.addLegacyMediaMetricsToStore)(store.current.store);\n        return ()=>{\n            metrics.destroy();\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const metrics = (0,_livepeer_core_media__WEBPACK_IMPORTED_MODULE_8__.addMetricsToStore)(store.current.store, {\n            onPlaybackEvents,\n            interval: metricsInterval\n        });\n        return ()=>{\n            metrics.destroy();\n        };\n    }, []);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaProvider, {\n        store: store.current.store,\n        scope: props.__scopeMedia\n    }, children);\n});\nPlayer.displayName = \"Player\";\nvar Root = Player;\n// src/player/Poster.tsx\n\n\n\nvar POSTER_NAME = \"Poster\";\nvar Poster = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, src, ...posterProps } = props;\n    const context = useMediaContext(POSTER_NAME, __scopeMedia);\n    const poster = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, ({ poster: poster2 })=>poster2);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || Boolean(src || poster)\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.img, {\n        alt: \"Poster for video\",\n        \"aria-hidden\": \"true\",\n        ...posterProps,\n        src: src || poster || void 0,\n        ref: forwardedRef,\n        \"data-livepeer-poster\": \"\",\n        \"data-visible\": String(Boolean(src || poster))\n    }));\n});\nPoster.displayName = POSTER_NAME;\n// src/player/RateSelect.tsx\n\n\n\n// src/shared/Select.tsx\n\nvar SelectRoot = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.Root;\nvar SelectTrigger2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectTrigger;\nvar SelectValue2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectValue;\nvar SelectIcon2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectIcon;\nvar SelectPortal2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectPortal;\nvar SelectContent2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectContent;\nvar SelectViewport2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectViewport;\nvar SelectGroup2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectGroup;\nvar SelectLabel2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectLabel;\nvar SelectItem2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectItem;\nvar SelectItemText2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectItemText;\nvar SelectItemIndicator2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectItemIndicator;\nvar SelectScrollUpButton2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectScrollUpButton;\nvar SelectScrollDownButton2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectScrollDownButton;\nvar SelectSeparator2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectSeparator;\nvar SelectArrow2 = _radix_ui_react_select__WEBPACK_IMPORTED_MODULE_12__.SelectArrow;\n// src/player/RateSelect.tsx\nvar RATE_SELECT_NAME = \"RateSelect\";\nvar RateSelect = (props)=>{\n    const { __scopeMedia, defaultValue, ...rateSelectProps } = props;\n    const context = useMediaContext(RATE_SELECT_NAME, __scopeMedia);\n    const { playbackRate, setPlaybackRate } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ playbackRate: playbackRate2, __controlsFunctions })=>({\n            playbackRate: playbackRate2,\n            setPlaybackRate: __controlsFunctions.setPlaybackRate\n        })));\n    const onValueChangeComposed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        setPlaybackRate(value);\n        props.onValueChange?.(value);\n    }, [\n        props.onValueChange,\n        setPlaybackRate\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SelectRoot, {\n        ...rateSelectProps,\n        value: playbackRate === \"constant\" ? \"constant\" : playbackRate.toFixed(2),\n        onValueChange: onValueChangeComposed,\n        \"data-livepeer-rate-select\": \"\",\n        \"data-rate\": String(playbackRate)\n    });\n};\nRateSelect.displayName = RATE_SELECT_NAME;\nvar RATE_SELECT_ITEM_NAME = \"RateSelectItem\";\nvar RateSelectItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, value, ...rateSelectItemProps } = props;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SelectItem2, {\n        ...rateSelectItemProps,\n        ref: forwardedRef,\n        value: Number(value).toFixed(2),\n        \"data-livepeer-rate-select-item\": \"\"\n    });\n});\nRateSelectItem.displayName = RATE_SELECT_ITEM_NAME;\n// src/player/Seek.tsx\n\n\n\n\n// src/shared/Slider.tsx\n\nvar Root4 = _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_13__.Root;\nvar Track2 = _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_13__.Track;\nvar Range2 = _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_13__.Range;\nvar Thumb2 = _radix_ui_react_slider__WEBPACK_IMPORTED_MODULE_13__.Thumb;\n// src/player/Seek.tsx\nvar SEEK_NAME = \"Seek\";\nvar Seek = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, style, ...seekProps } = props;\n    const context = useMediaContext(SEEK_NAME, __scopeMedia);\n    const { ariaProgress, duration, buffered, bufferedPercent, progress, live, seek } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ aria, duration: duration2, buffered: buffered2, bufferedPercent: bufferedPercent2, progress: progress2, live: live2, __controlsFunctions })=>({\n            ariaProgress: aria.progress,\n            duration: duration2,\n            buffered: buffered2,\n            bufferedPercent: bufferedPercent2,\n            progress: progress2,\n            live: live2,\n            seek: __controlsFunctions.requestSeek\n        })));\n    const onValueChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(([value])=>seek(value), [\n        seek\n    ]);\n    const onValueCommit = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(([value])=>seek(value), [\n        seek\n    ]);\n    const onValueChangeComposed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (props.onValueChange) {\n            props.onValueChange(value);\n        }\n        onValueChange(value);\n    }, [\n        props.onValueChange,\n        onValueChange\n    ]);\n    const onValueCommitComposed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (props.onValueCommit) {\n            props.onValueCommit(value);\n        }\n        onValueCommit(value);\n    }, [\n        props.onValueCommit,\n        onValueCommit\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || !live\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root4, {\n        \"aria-label\": live ? \"Live Seek Slider\" : \"Video Seek Slider\",\n        \"aria-valuetext\": ariaProgress ?? void 0,\n        step: 0.1,\n        max: duration,\n        value: [\n            progress\n        ],\n        role: \"slider\",\n        ...seekProps,\n        onValueChange: onValueChangeComposed,\n        onValueCommit: onValueCommitComposed,\n        onClick: noPropagate(()=>{}),\n        ref: forwardedRef,\n        \"data-livepeer-controls-seek\": \"\",\n        \"data-duration\": duration,\n        \"data-progress\": progress,\n        \"data-live\": String(live),\n        \"data-buffered\": buffered,\n        \"data-visible\": String(!live),\n        style: {\n            // biome-ignore lint/suspicious/noExplicitAny: player container css var\n            [\"--livepeer-player-buffering-width\"]: `${bufferedPercent ?? 0}%`,\n            ...style\n        }\n    }));\n});\nSeek.displayName = SEEK_NAME;\nvar SEEK_BUFFER_NAME = \"SeekBuffer\";\nvar SeekBuffer = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, style, ...bufferProps } = props;\n    const context = useMediaContext(SEEK_BUFFER_NAME, __scopeMedia);\n    const { bufferedPercent, buffered } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ bufferedPercent: bufferedPercent2, buffered: buffered2 })=>({\n            buffered: buffered2,\n            bufferedPercent: bufferedPercent2\n        })));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Track2, {\n        ...bufferProps,\n        ref: forwardedRef,\n        style: {\n            left: 0,\n            right: `${100 - (bufferedPercent ?? 0)}%`,\n            ...style\n        },\n        \"data-livepeer-controls-seek-buffer\": \"\",\n        \"data-buffered\": buffered\n    });\n});\nSeekBuffer.displayName = SEEK_BUFFER_NAME;\n// src/player/Video.tsx\n\n\n\n\n\nvar VIDEO_NAME = \"Video\";\nvar Video = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, style, poster, hlsConfig, title, ...videoProps } = props;\n    const context = useMediaContext(VIDEO_NAME, __scopeMedia);\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const composedRefs = (0,_radix_ui_react_compose_refs__WEBPACK_IMPORTED_MODULE_14__.useComposedRefs)(forwardedRef, ref);\n    const { currentSource, setMounted, autoPlay, preload, thumbnailPoster, volume, requestToggleMute } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ __controlsFunctions, __initialProps, currentSource: currentSource2, live, poster: poster2, volume: volume2 })=>({\n            autoPlay: __initialProps.autoPlay,\n            currentSource: currentSource2,\n            live,\n            preload: __initialProps.preload,\n            setMounted: __controlsFunctions.setMounted,\n            thumbnailPoster: poster2,\n            volume: volume2,\n            requestToggleMute: __controlsFunctions.requestToggleMute\n        })));\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (ref.current) {\n            const { destroy } = (0,_livepeer_core_web_browser__WEBPACK_IMPORTED_MODULE_11__.addEventListeners)(ref.current, context.store);\n            return destroy;\n        }\n    }, [\n        context?.store\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (hlsConfig) {\n            context.store.getState().__controlsFunctions.setHlsConfig(hlsConfig);\n        }\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        setMounted();\n    }, [\n        setMounted\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (typeof videoProps.muted !== \"undefined\") {\n            requestToggleMute(videoProps.muted);\n        }\n    }, [\n        videoProps.muted,\n        requestToggleMute\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.video, {\n        playsInline: true,\n        poster: poster === null ? void 0 : poster ?? thumbnailPoster ?? void 0,\n        muted: volume === 0,\n        ...videoProps,\n        \"aria-label\": title ?? videoProps[\"aria-label\"],\n        autoPlay,\n        preload,\n        ref: composedRefs,\n        \"data-livepeer-video\": \"\",\n        \"data-livepeer-source-type\": currentSource?.type ?? \"none\",\n        style: {\n            ...style,\n            // ensures video expands in ratio\n            position: \"absolute\",\n            inset: 0\n        }\n    });\n});\nVideo.displayName = VIDEO_NAME;\n// src/player/VideoQualitySelect.tsx\n\n\n\nvar VIDEO_QUALITY_SELECT_NAME = \"VideoQualitySelect\";\nvar VideoQualitySelect = (props)=>{\n    const { __scopeMedia, defaultValue, ...videoQualitySelectProps } = props;\n    const context = useMediaContext(VIDEO_QUALITY_SELECT_NAME, __scopeMedia);\n    const { videoQuality, setVideoQuality } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ videoQuality: videoQuality2, __controlsFunctions })=>({\n            videoQuality: videoQuality2,\n            setVideoQuality: __controlsFunctions.setVideoQuality\n        })));\n    const onValueChangeComposed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (props.onValueChange) {\n            props.onValueChange(value);\n        }\n        setVideoQuality(value);\n    }, [\n        props.onValueChange,\n        setVideoQuality\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SelectRoot, {\n        ...videoQualitySelectProps,\n        value: videoQuality,\n        onValueChange: onValueChangeComposed,\n        \"data-livepeer-quality-select\": \"\",\n        \"data-video-quality\": String(videoQuality)\n    });\n};\nVideoQualitySelect.displayName = VIDEO_QUALITY_SELECT_NAME;\nvar VIDEO_QUALITY_SELECT_ITEM_NAME = \"VideoQualitySelectItem\";\nvar VideoQualitySelectItem = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, ...videoQualitySelectItemProps } = props;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SelectItem2, {\n        ...videoQualitySelectItemProps,\n        ref: forwardedRef,\n        \"data-livepeer-quality-select-item\": \"\"\n    });\n});\nVideoQualitySelectItem.displayName = VIDEO_QUALITY_SELECT_ITEM_NAME;\n// src/player/Volume.tsx\n\n\n\n\n\nvar VOLUME_NAME = \"Volume\";\nvar Volume = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, ...volumeProps } = props;\n    const context = useMediaContext(VOLUME_NAME, __scopeMedia);\n    const { volume, requestVolume, isVolumeChangeSupported } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ volume: volume2, __controlsFunctions, __device })=>({\n            volume: volume2,\n            requestVolume: __controlsFunctions.requestVolume,\n            isVolumeChangeSupported: __device.isVolumeChangeSupported\n        })));\n    const onValueChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(([value])=>requestVolume(value), [\n        requestVolume\n    ]);\n    const onValueCommit = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(([value])=>requestVolume(value), [\n        requestVolume\n    ]);\n    const onValueChangeComposed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (props.onValueChange) {\n            props.onValueChange(value);\n        }\n        onValueChange(value);\n    }, [\n        props.onValueChange,\n        onValueChange\n    ]);\n    const onValueCommitComposed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((value)=>{\n        if (props.onValueCommit) {\n            props.onValueCommit(value);\n        }\n        onValueCommit(value);\n    }, [\n        props.onValueCommit,\n        onValueCommit\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || isVolumeChangeSupported\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Root4, {\n        \"aria-label\": \"Volume Slider\",\n        step: 0.01,\n        max: 1,\n        value: [\n            volume\n        ],\n        ...volumeProps,\n        onClick: noPropagate(()=>{}),\n        onValueChange: onValueChangeComposed,\n        onValueCommit: onValueCommitComposed,\n        ref: forwardedRef,\n        \"data-livepeer-controls-volume\": \"\",\n        \"data-livepeer-muted\": String(volume === 0),\n        \"data-livepeer-volume\": String((100 * volume).toFixed(0)),\n        \"data-visible\": String(Boolean(isVolumeChangeSupported))\n    }));\n});\nVolume.displayName = VOLUME_NAME;\nvar VOLUME_INDICATOR_NAME = \"VolumeIndicator\";\nvar VolumeIndicator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, matcher = false, ...volumeIndicatorProps } = props;\n    const context = useMediaContext(VOLUME_INDICATOR_NAME, __scopeMedia);\n    const { volume, muted, isVolumeChangeSupported } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ volume: volume2, __device, __controls })=>({\n            volume: volume2,\n            muted: __controls.muted,\n            isVolumeChangeSupported: __device.isVolumeChangeSupported\n        })));\n    const isPresent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>matcher !== void 0 ? typeof matcher === \"boolean\" ? matcher ? !muted : muted : matcher(volume) : muted, [\n        volume,\n        matcher,\n        muted\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (isVolumeChangeSupported && typeof matcher !== \"boolean\") {\n            (0,_livepeer_core_utils__WEBPACK_IMPORTED_MODULE_15__.warn)(\"Volume change is not supported on this device.\");\n        }\n    }, [\n        isVolumeChangeSupported,\n        matcher\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || isPresent\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.div, {\n        ...volumeIndicatorProps,\n        ref: forwardedRef,\n        \"data-livepeer-muted\": String(muted),\n        \"data-livepeer-volume\": String((100 * volume).toFixed(0)),\n        \"data-livepeer-controls-volume-indicator\": \"\",\n        \"data-visible\": String(isPresent)\n    }));\n});\nVolumeIndicator.displayName = VOLUME_INDICATOR_NAME;\n// src/shared/Container.tsx\n\n\n\n\nvar CONTAINER_NAME = \"Container\";\nvar Container = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, ...aspectRatioProps } = props;\n    const context = useMediaContext(CONTAINER_NAME, __scopeMedia);\n    const { aspectRatio, fullscreen, playing, canPlay, rate, error, live, hasPlayed, hidden, pictureInPicture, loading, videoQuality } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ __initialProps, fullscreen: fullscreen2, playing: playing2, canPlay: canPlay2, playbackRate, error: error2, live: live2, hasPlayed: hasPlayed2, hidden: hidden2, pictureInPicture: pictureInPicture2, loading: loading2, videoQuality: videoQuality2 })=>({\n            aspectRatio: __initialProps.aspectRatio,\n            fullscreen: fullscreen2,\n            playing: playing2,\n            canPlay: canPlay2,\n            error: Boolean(error2),\n            rate: playbackRate === \"constant\" ? \"constant\" : playbackRate > 1 ? \"fast\" : playbackRate < 1 ? \"slow\" : \"normal\",\n            live: live2,\n            hasPlayed: hasPlayed2,\n            hidden: hidden2,\n            pictureInPicture: pictureInPicture2,\n            loading: loading2,\n            videoQuality: videoQuality2\n        })));\n    return aspectRatio ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_aspect_ratio__WEBPACK_IMPORTED_MODULE_16__.Root, {\n        ratio: aspectRatio,\n        ...aspectRatioProps,\n        ref: forwardedRef,\n        \"data-livepeer-aspect-ratio\": \"\",\n        \"data-fullscreen\": String(fullscreen),\n        \"data-playing\": String(playing),\n        \"data-can-play\": String(canPlay),\n        \"data-playback-rate\": rate,\n        \"data-error\": String(error),\n        \"data-loading\": String(loading),\n        \"data-live\": String(live),\n        \"data-has-played\": String(hasPlayed),\n        \"data-controls-hidden\": String(hidden),\n        \"data-picture-in-picture\": String(pictureInPicture),\n        \"data-video-quality\": String(videoQuality)\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.div, {\n        ...aspectRatioProps,\n        ref: forwardedRef,\n        \"data-livepeer-wrapper\": \"\",\n        \"data-fullscreen\": String(fullscreen),\n        \"data-playing\": String(playing),\n        \"data-can-play\": String(canPlay),\n        \"data-playback-rate\": rate,\n        \"data-error\": String(error),\n        \"data-loading\": String(loading),\n        \"data-live\": String(live),\n        \"data-has-played\": String(hasPlayed),\n        \"data-controls-hidden\": String(hidden),\n        \"data-picture-in-picture\": String(pictureInPicture),\n        \"data-video-quality\": String(videoQuality)\n    });\n}));\nContainer.displayName = CONTAINER_NAME;\n// src/shared/ErrorIndicator.tsx\n\n\n\nvar ERROR_INDICATOR_NAME = \"ErrorIndicator\";\nvar ErrorIndicator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, matcher, ...offlineErrorProps } = props;\n    const context = useMediaContext(ERROR_INDICATOR_NAME, __scopeMedia);\n    const error = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, ({ error: error2 })=>error2);\n    const isPresent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>error ? typeof matcher === \"string\" ? matcher === \"all\" ? true : matcher === \"not-permissions\" ? error.type !== \"permissions\" : matcher === error.type : matcher(error.type) : false, [\n        error,\n        matcher\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || isPresent\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.div, {\n        ...offlineErrorProps,\n        ref: forwardedRef,\n        \"data-livepeer-error-indicator\": \"\",\n        \"data-error-state\": String(Boolean(error)),\n        \"data-error-type\": error?.type ?? \"none\",\n        \"data-visible\": String(isPresent)\n    }));\n});\nErrorIndicator.displayName = ERROR_INDICATOR_NAME;\n// src/shared/Fullscreen.tsx\n\n\n\n\n\nvar FULLSCREEN_INDICATOR_NAME = \"FullscreenIndicator\";\nvar FullscreenIndicator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, matcher = true, ...fullscreenIndicatorProps } = props;\n    const context = useMediaContext(FULLSCREEN_INDICATOR_NAME, __scopeMedia);\n    const fullscreen = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ fullscreen: fullscreen2 })=>fullscreen2));\n    const isPresent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>typeof matcher === \"function\" ? matcher(fullscreen) : matcher === fullscreen, [\n        matcher,\n        fullscreen\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || isPresent\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.div, {\n        ...fullscreenIndicatorProps,\n        ref: forwardedRef,\n        \"data-livepeer-controls-fullscreen-indicator\": \"\",\n        \"data-fullscreen\": String(Boolean(fullscreen)),\n        \"data-visible\": String(isPresent)\n    }));\n});\nFullscreenIndicator.displayName = FULLSCREEN_INDICATOR_NAME;\nvar FULLSCREEN_TRIGGER_NAME = \"FullscreenTrigger\";\nvar FullscreenTrigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, ...fullscreenProps } = props;\n    const context = useMediaContext(FULLSCREEN_TRIGGER_NAME, __scopeMedia);\n    const { title, fullscreen, requestToggleFullscreen } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ fullscreen: fullscreen2, __controlsFunctions, aria })=>({\n            fullscreen: fullscreen2,\n            requestToggleFullscreen: __controlsFunctions.requestToggleFullscreen,\n            title: aria.fullscreen\n        })));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.button, {\n        type: \"button\",\n        \"aria-pressed\": fullscreen,\n        \"aria-label\": title ?? void 0,\n        title: title ?? void 0,\n        ...fullscreenProps,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onClick, noPropagate(requestToggleFullscreen)),\n        ref: forwardedRef,\n        \"data-livepeer-controls-fullscreen-trigger\": \"\",\n        \"data-fullscreen-state\": String(Boolean(fullscreen))\n    });\n});\nFullscreenTrigger.displayName = FULLSCREEN_TRIGGER_NAME;\n// src/shared/LoadingIndicator.tsx\n\n\n\nvar LOADING_INDICATOR_NAME = \"LoadingIndicator\";\nvar LoadingIndicator = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, matcher = true, ...offlineErrorProps } = props;\n    const context = useMediaContext(LOADING_INDICATOR_NAME, __scopeMedia);\n    const loading = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, ({ loading: loading2 })=>loading2);\n    const isPresent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>typeof matcher === \"function\" ? matcher(loading) : matcher === loading, [\n        matcher,\n        loading\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || isPresent\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.div, {\n        \"aria-label\": \"Loading\",\n        ...offlineErrorProps,\n        ref: forwardedRef,\n        \"data-livepeer-loading-indicator\": \"\",\n        \"data-loading\": String(Boolean(loading)),\n        \"data-visible\": String(isPresent)\n    }));\n});\nLoadingIndicator.displayName = LOADING_INDICATOR_NAME;\n// src/shared/PictureInPictureTrigger.tsx\n\n\n\n\n\nvar PICTURE_IN_PICTURE_TRIGGER_NAME = \"PictureInPictureTrigger\";\nvar PictureInPictureTrigger = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, forceMount, ...pictureInPictureProps } = props;\n    const context = useMediaContext(PICTURE_IN_PICTURE_TRIGGER_NAME, __scopeMedia);\n    const { pictureInPicture, requestTogglePictureInPicture, isPictureInPictureSupported, fullscreen, title } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ pictureInPicture: pictureInPicture2, __controlsFunctions, __device, fullscreen: fullscreen2, aria })=>({\n            pictureInPicture: pictureInPicture2,\n            requestTogglePictureInPicture: __controlsFunctions.requestTogglePictureInPicture,\n            isPictureInPictureSupported: __device.isPictureInPictureSupported,\n            fullscreen: fullscreen2,\n            title: aria.pictureInPicture\n        })));\n    return(// do not show button if it is not supported or if currently fullscreen\n    /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_presence__WEBPACK_IMPORTED_MODULE_6__.Presence, {\n        present: forceMount || isPictureInPictureSupported && !fullscreen\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.button, {\n        type: \"button\",\n        \"aria-pressed\": pictureInPicture,\n        \"aria-label\": title ?? void 0,\n        title: title ?? void 0,\n        ...pictureInPictureProps,\n        onClick: (0,_radix_ui_primitive__WEBPACK_IMPORTED_MODULE_7__.composeEventHandlers)(props.onClick, noPropagate(requestTogglePictureInPicture)),\n        ref: forwardedRef,\n        \"data-livepeer-controls-picture-in-picture-trigger\": \"\",\n        \"data-picture-in-picture\": String(Boolean(pictureInPicture)),\n        \"data-visible\": String(isPictureInPictureSupported && !fullscreen)\n    })));\n});\nPictureInPictureTrigger.displayName = PICTURE_IN_PICTURE_TRIGGER_NAME;\n// src/shared/Portal.tsx\n\n\nvar PORTAL_NAME = \"Portal\";\nvar Portal = (props)=>{\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(_radix_ui_react_portal__WEBPACK_IMPORTED_MODULE_17__.Root, {\n        ...props\n    });\n};\nPortal.displayName = PORTAL_NAME;\n// src/shared/Time.tsx\n\n\n\nvar TIME_NAME = \"Time\";\nvar Time = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, forwardedRef)=>{\n    const { __scopeMedia, ...timeProps } = props;\n    const context = useMediaContext(TIME_NAME, __scopeMedia);\n    const { progress, duration, live, formattedTime } = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.useStore)(context.store, (0,zustand_react_shallow__WEBPACK_IMPORTED_MODULE_5__.useShallow)(({ progress: progress2, duration: duration2, live: live2, aria })=>({\n            formattedTime: aria.time,\n            progress: progress2,\n            duration: duration2,\n            live: live2\n        })));\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Primitive.span, {\n        \"aria-label\": formattedTime ?? void 0,\n        title: formattedTime ?? void 0,\n        ...timeProps,\n        ref: forwardedRef,\n        \"data-livepeer-controls-time\": \"\",\n        \"data-duration\": duration,\n        \"data-progress\": progress,\n        \"data-live\": String(live)\n    }, formattedTime);\n});\nTime.displayName = TIME_NAME;\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livepeer/react/dist/player/index.js\n");

/***/ })

};
;